#version 330
uniform vec3 _WorldSpaceCameraPos;
uniform vec3 _XGlobalCharSpecularColor;
uniform vec3 _XGlobalCharacterNoShadowColor;
uniform vec3 _XGlobalCharacterOneShadowColor;
uniform vec3 _XGlobalCharacterTwoShadowColor;
uniform vec3 _XGlobalCharacterRimColor;
uniform vec3 _XGlobalCharacterLightColor;
uniform vec3 _XGlobalCharacterLightDir;
uniform vec3 _XGlobalCharacterAmbientColor;
uniform float _BloomFactor;
uniform float _EmissionIntensity;
uniform vec3 _EmissionColor;
uniform float _EmissionBloomFactor;
uniform float _XPostBloom;
uniform vec4 _BloomModColor;
uniform float _BloomModIntensity;
uniform float _BumpScale;
uniform vec4 _BumpMap_ST;
uniform float _XShadowOffset;
uniform float _XShadowNormalBias;
uniform vec3 _XWorldSpaceShadowLightDir;
uniform vec4 _LinearFogColor;
uniform vec4 _LinearFogParams;
uniform vec4 _AlbedoColor;
uniform float _GlobalEnableDistanceRim;
uniform vec3 _GlobalRimLightDir;
uniform vec4 _MainTex_ST;
uniform vec4 _MaskTex_ST;
uniform vec4 _GlobalTint;
uniform float _FirstShadow;
uniform float _SecondShadow;
uniform vec3 _FirstShadowColor;
uniform vec3 _SecondShadowColor;
uniform float _SpecularShiness;
uniform float _SpecularIntensity;
uniform vec3 _SpecularColor;
uniform vec3 _NoShadowColor;
uniform float _SmoothFactor;
uniform vec4 _DetailMap_ST;
uniform float _RimMax;
uniform float _RimMin;
uniform float _RimIntensity;
uniform vec3 _RimColor;
uniform float _RimThreshold;
uniform float _RimDistanceMin;
uniform float _RimDistanceMax;
uniform vec4 _EffectRimColor;
uniform float _EffectRimFading;
uniform float _EffectRimTransparency;
uniform vec4 _PBRMask_ST;
uniform float _MetallicMapScale;
uniform float _RoughnessMapScale;
uniform float _AOScale;
uniform float _PBRRate;
uniform vec4 _DirectLightColor;
uniform vec4 _IndirectLightColor;
uniform float _IndirectLightIntensity;
uniform vec4 _PBRSpecularColor;
uniform float _PBRSpecularIntensity;
uniform vec4 _CubemapColor;
uniform float _CubemapIntensity;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _DetailMap;
uniform sampler2D _PBRMask;
uniform sampler2D _MaskTex;
uniform sampler2D _XShadowTexture;
uniform samplerCube _CubeMap;
in vec4 vs_TEXCOORD0;
in vec4 vs_TEXCOORD1;
in vec4 vs_TEXCOORD2;
in vec4 vs_TEXCOORD3;
in vec3 vs_TEXCOORD5;
in float vs_TEXCOORD6;
in vec4 vs_TEXCOORD7;
in vec4 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat16_3;
vec3 u_xlat4;
vec4 u_xlat16_4;
vec4 u_xlat5;
vec4 u_xlat16_5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat16_8;
vec4 u_xlat16_9;
vec3 u_xlat16_10;
vec3 u_xlat11;
float u_xlat16_11;
bool u_xlatb11;
vec3 u_xlat12;
float u_xlat16_12;
vec2 u_xlat13;
bvec2 u_xlatb13;
float u_xlat22;
vec2 u_xlat23;
float u_xlat16_23;
bvec2 u_xlatb23;
float u_xlat33;
float u_xlat34;
float u_xlat35;
float u_xlat36;
void main(){
// u_xlat0:法线
(u_xlat0.xy = ((vs_TEXCOORD0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw));
(u_xlat16_0.xyz = texture(_BumpMap, u_xlat0.xy).xyz);
(u_xlat0.xyz = ((u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0)) + vec3(-1.0, -1.0, -1.0)));
(u_xlat0.xy = (u_xlat0.xy * vec2(_BumpScale)));
(u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz));
(u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz));
(u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz));
(u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz));
(u_xlat0.x = inversesqrt(u_xlat0.x));
(u_xlat0.xyz = (u_xlat0.xxx * u_xlat1.xyz));

// u_xlat12: ViewDir
(u_xlat1.x = vs_TEXCOORD1.w);
(u_xlat1.y = vs_TEXCOORD2.w);
(u_xlat1.z = vs_TEXCOORD3.w);
(u_xlat2.xyz = ((-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz));
(u_xlat1.xyz = (u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz)));
(u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz));
(u_xlat33 = (u_xlat33 + (-_RimDistanceMin)));
(u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz));
(u_xlat1.x = inversesqrt(u_xlat1.x));
(u_xlat12.xyz = (u_xlat1.xxx * u_xlat2.xyz));

(u_xlat35 = dot((-u_xlat12.xyz), u_xlat0.xyz));
(u_xlat35 = (u_xlat35 + u_xlat35));
(u_xlat3.xyz = ((u_xlat0.xyz * (-vec3(u_xlat35))) + (-u_xlat12.xyz)));

// u_xlat16_12:NoV
(u_xlat16_12 = dot(u_xlat0.xyz, u_xlat12.xyz));

(u_xlat23.xy = ((vs_TEXCOORD0.xy * _PBRMask_ST.xy) + _PBRMask_ST.zw));
(u_xlat16_4 = texture(_PBRMask, u_xlat23.xy));
(u_xlat23.xy = (u_xlat16_4.yx * vec2(_MetallicMapScale, _RoughnessMapScale)));
(u_xlat35 = (((-u_xlat23.y) * 0.69999999) + 1.7));
(u_xlat35 = (u_xlat23.y * u_xlat35));
(u_xlat35 = (u_xlat35 * 8.0));

(u_xlat16_3 = textureLod(_CubeMap, u_xlat3.xyz, u_xlat35));
(u_xlat16_3.xyz = (u_xlat16_3.www * u_xlat16_3.xyz));

// u_xlat35:VoN
(u_xlat35 = u_xlat16_12);
(u_xlat35 = clamp(u_xlat35, 0.0, 1.0));

(u_xlat36 = (u_xlat35 * -9.2799997));
(u_xlat35 = ((-u_xlat35) + 1.0));
(u_xlat35 = (u_xlat35 + (-_RimMin)));
(u_xlat36 = exp2(u_xlat36));

(u_xlat5 = ((u_xlat23.yyyy * vec4(-1.0, -0.0275, -0.57200003, 0.022)) + vec4(1.0, 0.0425, 1.04, -0.039999999)));
(u_xlat4.x = (u_xlat5.x * u_xlat5.x));
(u_xlat36 = min(u_xlat36, u_xlat4.x));
(u_xlat36 = ((u_xlat36 * u_xlat5.x) + u_xlat5.y));
(u_xlat4.xy = ((vec2(u_xlat36) * vec2(-1.04, 1.04)) + u_xlat5.zw));

(u_xlat5.xy = ((vs_TEXCOORD0.zw * _DetailMap_ST.xy) + _DetailMap_ST.zw));
(u_xlat16_5 = texture(_DetailMap, u_xlat5.xy));

(u_xlat6.xy = ((vs_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw));
(u_xlat6 = texture(_MainTex, u_xlat6.xy));

(u_xlat5.xyz = (u_xlat16_5.xyz + (-u_xlat6.xyz)));
(u_xlat6.xyz = ((u_xlat16_5.www * u_xlat5.xyz) + u_xlat6.xyz));
(u_xlat5 = (u_xlat6 * _AlbedoColor));

(u_xlat7.xyz = ((u_xlat6.xyz * _AlbedoColor.xyz) + vec3(-0.039999999, -0.039999999, -0.039999999)));
(u_xlat7.xyz = ((u_xlat23.xxx * u_xlat7.xyz) + vec3(0.039999999, 0.039999999, 0.039999999)));
(u_xlat7.xyz = (u_xlat7.xyz * _PBRSpecularColor.xyz));

(u_xlat36 = (u_xlat7.y * 50.0));
(u_xlat36 = clamp(u_xlat36, 0.0, 1.0));
(u_xlat36 = (u_xlat36 * u_xlat4.y));
(u_xlat7.xyz = ((u_xlat7.xyz * u_xlat4.xxx) + vec3(u_xlat36)));

(u_xlat3.xyz = (u_xlat16_3.xyz * u_xlat7.xyz));
(u_xlat3.xyz = (u_xlat3.xyz * _CubemapColor.xyz));
(u_xlat3.xyz = (u_xlat3.xyz * vec3(_CubemapIntensity)));
(u_xlat3.xyz = (u_xlat3.xyz * vec3(6.0, 6.0, 6.0)));

// u_xlat8:lightDir
(u_xlat36 = dot(_XGlobalCharacterLightDir.xyz, _XGlobalCharacterLightDir.xyz));
(u_xlat36 = inversesqrt(u_xlat36));
(u_xlat8.xyz = (vec3(u_xlat36) * _XGlobalCharacterLightDir.xyz));

// u_xlat2:halfDir
(u_xlat2.xyz = ((u_xlat2.xyz * u_xlat1.xxx) + u_xlat8.xyz));
(u_xlat1.x = dot(u_xlat0.xyz, u_xlat8.xyz));
(u_xlat36 = dot(u_xlat2.xyz, u_xlat2.xyz));
(u_xlat36 = inversesqrt(u_xlat36));
(u_xlat2.xyz = (u_xlat2.xyz * vec3(u_xlat36)));

// u_xlat2.x:HoN
(u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz));
(u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0));

(u_xlat34 = (u_xlat23.y * u_xlat23.y));

(u_xlat23.x = ((u_xlat23.x * -0.95999998) + 0.95999998));
(u_xlat8.xyz = (u_xlat23.xxx * u_xlat5.xyz));
(u_xlat8.xyz = (u_xlat8.xyz * _IndirectLightColor.xyz));
(u_xlat8.xyz = ((u_xlat8.xyz * vec3(_IndirectLightIntensity)) + u_xlat3.xyz));

(u_xlat23.x = max(u_xlat34, 0.0020000001));
(u_xlat23.x = (u_xlat23.x * u_xlat23.x));
(u_xlat34 = ((u_xlat2.x * u_xlat23.x) + (-u_xlat2.x)));
(u_xlat23.x = (u_xlat23.x * 0.31830987));
(u_xlat34 = ((u_xlat34 * u_xlat2.x) + 1.00001));

(u_xlat2.x = max(u_xlat2.x, 9.9999997e-05));
(u_xlat2.x = log2(u_xlat2.x));
(u_xlat2.x = (u_xlat2.x * _SpecularShiness));
(u_xlat2.x = exp2(u_xlat2.x));


(u_xlat34 = ((u_xlat34 * u_xlat34) + 1e-07));
(u_xlat23.x = (u_xlat23.x / u_xlat34));

(u_xlat7.xyz = (u_xlat23.xxx * u_xlat7.xyz));
(u_xlat3.xyz = ((u_xlat7.xyz * vec3(_PBRSpecularIntensity)) + u_xlat3.xyz));
(u_xlat3.xyz = (u_xlat3.xyz * _DirectLightColor.xyz));

(u_xlat34 = (u_xlat16_4.w * _PBRRate));

(u_xlat16_23 = (u_xlat16_4.z + -1.0));
(u_xlat23.x = ((_AOScale * u_xlat16_23) + 1.0));
(u_xlat4.xyz = (u_xlat23.xxx * u_xlat8.xyz));

(u_xlat23.x = u_xlat1.x);
(u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0));
(u_xlat1.x = ((u_xlat1.x * 0.5) + 0.5));

(u_xlat3.xyz = ((u_xlat3.xyz * u_xlat23.xxx) + u_xlat4.xyz));
(u_xlat3.xyz = (((-u_xlat6.xyz) * _AlbedoColor.xyz) + u_xlat3.xyz));
(u_xlat3.xyz = ((vec3(u_xlat34) * u_xlat3.xyz) + u_xlat5.xyz));

(u_xlat4.xyz = (u_xlat3.xyz * _NoShadowColor.xyz));
(u_xlat4.xyz = (u_xlat4.xyz * _XGlobalCharacterNoShadowColor.xyz));

(u_xlat6.xyz = (u_xlat3.xyz * _FirstShadowColor.xyz));
(u_xlat7.xyz = ((u_xlat6.xyz * _XGlobalCharacterOneShadowColor.xyz) + (-u_xlat4.xyz)));

u_xlat6: firstShadowColor
(u_xlat6.xyz = (u_xlat6.xyz * _XGlobalCharacterOneShadowColor.xyz));

// 阴影值
(u_xlat23.x = dot(u_xlat0.xyz, _XWorldSpaceShadowLightDir.xyz));
(u_xlat0.x = dot(u_xlat0.xyz, _GlobalRimLightDir.xyz));
(u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0));
(u_xlat11.x = (((-u_xlat23.x) * u_xlat23.x) + 1.0));
(u_xlat11.x = sqrt(u_xlat11.x));
(u_xlat11.x = ((_XShadowNormalBias * u_xlat11.x) + _XShadowOffset));
(u_xlat8.xyz = (vs_TEXCOORD8.xyz / vs_TEXCOORD8.www));
(u_xlat8.xyz = ((u_xlat8.xyz * vec3(0.5, 0.5, 0.5)) + vec3(0.5, 0.5, 0.5)));
(u_xlat11.x = ((-u_xlat11.x) + u_xlat8.z));
(u_xlat16_9 = texture(_XShadowTexture, u_xlat8.xy));
(u_xlat22 = dot(u_xlat16_9, vec4(1.0, 0.0039215689, 1.53787e-05, 6.0308629e-08)));
(u_xlatb11 = (u_xlat22 >= u_xlat11.x));
(u_xlatb23.xy = greaterThanEqual(u_xlat8.xyxy, vec4(0.1, 0.1, 0.1, 0.1)).xy);
(u_xlatb13.xy = greaterThanEqual(vec4(0.89999998, 0.89999998, 0.0, 0.0), u_xlat8.xyxx).xy);
(u_xlat13.xy = mix(vec2(0.0, 0.0), vec2(1.0, 1.0), vec2(u_xlatb13.xy)));
(u_xlat23.xy = mix(vec2(0.0, 0.0), vec2(1.0, 1.0), vec2(u_xlatb23.xy)));
(u_xlat22 = (u_xlat13.x * u_xlat23.x));
(u_xlat22 = (u_xlat23.y * u_xlat22));
(u_xlat22 = (((-u_xlat22) * u_xlat13.y) + 1.0));
(u_xlat11.x = ((u_xlatb11) ? (1.0) : (u_xlat22)));

(u_xlat23.xy = ((vs_TEXCOORD0.xy * _MaskTex_ST.xy) + _MaskTex_ST.zw));
(u_xlat16_8 = texture(_MaskTex, u_xlat23.xy));
(u_xlat22 = ((vs_TEXCOORD7.y * 2.0) + u_xlat16_8.y));
(u_xlat22 = (u_xlat22 + -1.0));
(u_xlat22 = clamp(u_xlat22, 0.0, 1.0));

(u_xlat23.x = ((-u_xlat22) + 1.5));
(u_xlat23.x = floor(u_xlat23.x));
(u_xlat23.x = ((-u_xlat23.x) + 1.0));
(u_xlat13.xy = ((vec2(u_xlat22) * vec2(1.2, 1.25)) + vec2(-0.1, -0.12)));
(u_xlat34 = ((-u_xlat13.y) + u_xlat13.x));
(u_xlat23.x = ((u_xlat23.x * u_xlat34) + u_xlat13.y));
(u_xlat23.x = (u_xlat1.x + u_xlat23.x));

(u_xlat1.x = (u_xlat1.x + u_xlat22));
(u_xlat22 = (u_xlat22 + 0.89999998));
(u_xlat22 = floor(u_xlat22));
(u_xlat22 = ((-u_xlat22) + 1.0));
(u_xlat1.x = ((u_xlat1.x * 0.5) + 1.0));
(u_xlat1.x = (u_xlat1.x + (-_SecondShadow)));
(u_xlat1.x = floor(u_xlat1.x));
(u_xlat1.x = ((-u_xlat1.x) + 1.0));

(u_xlat23.x = ((u_xlat23.x * 0.5) + 1.0));
(u_xlat23.x = (u_xlat23.x + (-_FirstShadow)));
(u_xlat23.x = (u_xlat23.x + -1.0));

(u_xlat23.x = max(u_xlat23.x, (-_SmoothFactor)));
(u_xlat23.x = min(u_xlat23.x, _SmoothFactor));
(u_xlat23.x = (u_xlat23.x + _SmoothFactor));
(u_xlat34 = (_SmoothFactor + _SmoothFactor));
(u_xlat23.x = (u_xlat23.x / u_xlat34));
(u_xlat11.x = ((u_xlat11.x * (-u_xlat23.x)) + 1.0));

(u_xlat4.xyz = ((u_xlat11.xxx * u_xlat7.xyz) + u_xlat4.xyz));

(u_xlat7.xyz = (u_xlat3.xyz * _SecondShadowColor.xyz));
(u_xlat7.xyz = ((u_xlat7.xyz * _XGlobalCharacterTwoShadowColor.xyz) + (-u_xlat6.xyz)));
(u_xlat1.xzw = ((u_xlat1.xxx * u_xlat7.xyz) + u_xlat6.xyz));


(u_xlat1.xzw = ((-u_xlat4.xyz) + u_xlat1.xzw));
(u_xlat1.xzw = ((vec3(u_xlat22) * u_xlat1.xzw) + u_xlat4.xyz));



(u_xlat16_11 = ((-u_xlat16_8.x) + 2.0));
(u_xlat11.x = ((-u_xlat2.x) + u_xlat16_11));
(u_xlat11.x = floor(u_xlat11.x));
(u_xlat11.x = ((-u_xlat11.x) + 1.0));
(u_xlat11.x = max(u_xlat11.x, 0.0));
(u_xlat22 = (u_xlat16_8.z * _SpecularIntensity));
(u_xlat2.xyz = (u_xlat3.xyz * vec3(u_xlat22)));
(u_xlat2.xyz = (u_xlat2.xyz * vec3(_SpecularColor.x, _SpecularColor.y, _SpecularColor.z)));
(u_xlat2.xyz = (u_xlat11.xxx * u_xlat2.xyz));
(u_xlat1.xzw = ((u_xlat2.xyz * _XGlobalCharSpecularColor.xyz) + u_xlat1.xzw));


//smoothstep
(u_xlat11.x = ((-_RimDistanceMin) + _RimDistanceMax));
(u_xlat11.x = (1.0 / u_xlat11.x));
(u_xlat11.x = (u_xlat11.x * u_xlat33));
(u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0));
(u_xlat22 = ((u_xlat11.x * -2.0) + 3.0));
(u_xlat11.x = (u_xlat11.x * u_xlat11.x));
(u_xlat11.x = (u_xlat11.x * u_xlat22));

(u_xlat11.x = ((_GlobalEnableDistanceRim * (-u_xlat11.x)) + 1.0));
(u_xlat0.x = (u_xlat0.x * u_xlat11.x));

(u_xlat11.x = (u_xlat16_12 + _RimThreshold));

// 边缘光
(u_xlat16_10.x = ((-abs(u_xlat16_12)) + 1.0));
(u_xlat16_10.x = max(u_xlat16_10.x, 0.001));
(u_xlat16_10.x = log2(u_xlat16_10.x));
(u_xlat16_10.x = (u_xlat16_10.x * _EffectRimFading));
(u_xlat16_10.x = exp2(u_xlat16_10.x));
(u_xlat16_10.xyz = (u_xlat16_10.xxx * _EffectRimColor.xyz));

(u_xlatb11 = (u_xlat11.x >= 0.0));
(u_xlat11.x = ((u_xlatb11) ? (1.0) : (0.0)));

//smoothstep
(u_xlat22 = ((-_RimMin) + _RimMax));
(u_xlat22 = (1.0 / u_xlat22));
(u_xlat22 = (u_xlat22 * u_xlat35));
(u_xlat22 = clamp(u_xlat22, 0.0, 1.0));
(u_xlat33 = (u_xlat22 * u_xlat22));
(u_xlat22 = ((u_xlat22 * -2.0) + 3.0));

(u_xlat22 = (u_xlat22 * u_xlat33));
(u_xlat22 = (u_xlat22 * _RimIntensity));
(u_xlat11.x = (u_xlat11.x * u_xlat22));
(u_xlat11.xyz = (u_xlat11.xxx * _RimColor.xyz));


(u_xlat11.xyz = (u_xlat11.xyz * _XGlobalCharacterRimColor.xyz));
(u_xlat11.xyz = (u_xlat11.xyz * vs_TEXCOORD7.www));

(u_xlat0.xyz = ((u_xlat0.xxx * u_xlat11.xyz) + u_xlat1.xzw));

(u_xlat0.xyz = (u_xlat0.xyz * _XGlobalCharacterLightColor.xyz));
(u_xlat0.xyz = ((u_xlat0.xyz * vs_TEXCOORD5.xyz) + u_xlat0.xyz));

(u_xlat0.w = (u_xlat5.w * _BloomFactor));
(u_xlat1.xyz = (u_xlat5.xyz * vec3(_EmissionIntensity)));
(u_xlat1.xyz = (u_xlat1.xyz * vec3(_EmissionColor.x, _EmissionColor.y, _EmissionColor.z)));
(u_xlat1.xyz = (u_xlat16_8.www * u_xlat1.xyz));
(u_xlat2.x = ((-_BloomFactor) + _EmissionBloomFactor));
(u_xlat1.w = ((u_xlat2.x * u_xlat16_8.w) + _BloomFactor));
(u_xlat0 = (u_xlat0 + u_xlat1));
(u_xlat16_10.xyz = ((vec3(vec3(_EffectRimTransparency, _EffectRimTransparency, _EffectRimTransparency)) * u_xlat16_10.xyz) + u_xlat0.xyz));
(u_xlat0.w = max(u_xlat0.w, 0.0));

(u_xlat1.xyz = (_XGlobalCharacterAmbientColor.xyz * _GlobalTint.xyz));
(u_xlat1.xyz = (u_xlat1.xyz * u_xlat16_10.xyz));

(u_xlat2.xyz = (u_xlat1.xyz * _BloomModColor.xyz));
(u_xlat2.xyz = ((u_xlat2.xyz * vec3(_BloomModIntensity)) + (-u_xlat1.xyz)));
(u_xlat0.xyz = ((vec3(vec3(_XPostBloom, _XPostBloom, _XPostBloom)) * u_xlat2.xyz) + u_xlat1.xyz));

(u_xlat0 = (u_xlat0 + (-_LinearFogColor)));
(u_xlat1.x = max(vs_TEXCOORD6, 0.0));
(u_xlat1.x = ((u_xlat1.x * _LinearFogParams.x) + _LinearFogParams.y));
(u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0));
(SV_Target0 = ((u_xlat1.xxxx * u_xlat0) + _LinearFogColor));
return ;
}
