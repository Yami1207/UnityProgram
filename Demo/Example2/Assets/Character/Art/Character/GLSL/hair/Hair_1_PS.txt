#version 330
uniform vec3 _WorldSpaceCameraPos;
uniform vec3 _XGlobalCharSpecularColor;
uniform vec3 _XGlobalCharacterNoShadowColor;
uniform vec3 _XGlobalCharacterOneShadowColor;
uniform vec3 _XGlobalCharacterTwoShadowColor;
uniform vec3 _XGlobalCharacterRimColor;
uniform vec3 _XGlobalCharacterLightColor;
uniform vec3 _XGlobalCharacterLightDir;
uniform vec3 _XGlobalCharacterAmbientColor;
uniform float _EmissionIntensity;
uniform vec3 _EmissionColor;
uniform float _XPostBloom;
uniform vec4 _BloomModColor;
uniform float _BloomModIntensity;
uniform vec4 _LinearFogColor;
uniform vec4 _LinearFogParams;
uniform vec4 _AlbedoColor;
uniform float _SpecularShadowIntensity;
uniform float _GlobalEnableDistanceRim;
uniform vec3 _GlobalRimLightDir;
uniform vec4 _MainTex_ST;
uniform vec4 _MaskTex_ST;
uniform vec4 _GlobalTint;
uniform float _FirstShadow;
uniform float _SecondShadow;
uniform vec3 _FirstShadowColor;
uniform vec3 _SecondShadowColor;
uniform float _SpecularShiness;
uniform float _SpecularIntensity;
uniform vec3 _SpecularColor;
uniform vec3 _NoShadowColor;
uniform float _SmoothFactor;
uniform vec3 _SkinColor;
uniform float _SkinIntensity;
uniform float _SkinRate;
uniform float _RimMax;
uniform float _RimMin;
uniform float _RimIntensity;
uniform vec3 _RimColor;
uniform float _RimThreshold;
uniform float _RimDistanceMin;
uniform float _RimDistanceMax;
uniform vec4 _EffectRimColor;
uniform float _EffectRimFading;
uniform float _EffectRimTransparency;
uniform sampler2D _MainTex;
uniform sampler2D _SkinRamp;
uniform sampler2D _MaskTex;
in vec4 vs_TEXCOORD0;
in vec3 vs_TEXCOORD1;
in float vs_TEXCOORD6;
in vec4 vs_TEXCOORD2;
in vec3 vs_TEXCOORD5;
in vec4 vs_TEXCOORD7;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat16_8;
float u_xlat9;
vec3 u_xlat10;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
float u_xlat21;
bool u_xlatb21;
float u_xlat27;
float u_xlat29;
float u_xlat30;
float u_xlat16_30;
void main(){
(u_xlat0.xy = ((vs_TEXCOORD0.xy * _MaskTex_ST.xy) + _MaskTex_ST.zw));
(u_xlat0 = texture(_MaskTex, u_xlat0.xy));
(u_xlat9 = ((vs_TEXCOORD7.y * 2.0) + u_xlat0.y));
(u_xlat9 = (u_xlat9 + -1.0));
(u_xlat9 = clamp(u_xlat9, 0.0, 1.0));
(u_xlat1.x = ((-u_xlat9) + 1.5));
(u_xlat1.x = floor(u_xlat1.x));
(u_xlat1.x = ((-u_xlat1.x) + 1.0));

(u_xlat10.xy = ((vec2(u_xlat9) * vec2(1.2, 1.25)) + vec2(-0.1, -0.12)));
(u_xlat10.x = ((-u_xlat10.y) + u_xlat10.x));
(u_xlat1.x = ((u_xlat1.x * u_xlat10.x) + u_xlat10.y));

// u_xlat10: lightDir
(u_xlat10.x = dot(_XGlobalCharacterLightDir.xyz, _XGlobalCharacterLightDir.xyz));
(u_xlat10.x = inversesqrt(u_xlat10.x));
(u_xlat10.xyz = (u_xlat10.xxx * _XGlobalCharacterLightDir.xyz));

// u_xlat2: ·¨Ïß
(u_xlat2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz));
(u_xlat2.x = inversesqrt(u_xlat2.x));
(u_xlat2.xyz = (u_xlat2.xxx * vs_TEXCOORD1.xyz));

// u_xlat29: NoL
(u_xlat29 = dot(u_xlat2.xyz, u_xlat10.xyz));

(u_xlat3.x = ((u_xlat29 * 0.5) + 0.5));

(u_xlat1.x = (u_xlat1.x + u_xlat3.x));
(u_xlat1.x = ((u_xlat1.x * 0.5) + 1.0));
(u_xlat1.x = (u_xlat1.x + (-_FirstShadow)));
(u_xlat1.x = (u_xlat1.x + -1.0));
(u_xlat1.x = max(u_xlat1.x, (-_SmoothFactor)));
(u_xlat1.x = min(u_xlat1.x, _SmoothFactor));
(u_xlat1.x = (u_xlat1.x + _SmoothFactor));
(u_xlat29 = (_SmoothFactor + _SmoothFactor));
(u_xlat1.x = (u_xlat1.x / u_xlat29));
(u_xlat1.x = ((-u_xlat1.x) + 1.0));

(u_xlat29 = (u_xlat9 + 0.89999998));
(u_xlat29 = floor(u_xlat29));
(u_xlat29 = ((-u_xlat29) + 1.0));

(u_xlat9 = (u_xlat9 + u_xlat3.x));
(u_xlat9 = ((u_xlat9 * 0.5) + 1.0));
(u_xlat9 = (u_xlat9 + (-_SecondShadow)));

(u_xlat0.y = floor(u_xlat9));

(u_xlat21 = (u_xlat1.x + u_xlat29));
(u_xlatb21 = (u_xlat21 >= 9.9999997e-05));
(u_xlat21 = ((u_xlatb21) ? (1.0) : (0.0)));

(u_xlat4.xyz = ((-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz));
(u_xlat30 = dot(u_xlat4.xyz, u_xlat4.xyz));
(u_xlat30 = inversesqrt(u_xlat30));
(u_xlat10.xyz = ((u_xlat4.xyz * vec3(u_xlat30)) + u_xlat10.xyz));

(u_xlat4.xyz = (vec3(u_xlat30) * u_xlat4.xyz));
(u_xlat16_30 = dot(u_xlat2.xyz, u_xlat4.xyz));

(u_xlat4.x = dot(u_xlat10.xyz, u_xlat10.xyz));
(u_xlat4.x = inversesqrt(u_xlat4.x));
(u_xlat10.xyz = (u_xlat10.xyz * u_xlat4.xxx));
(u_xlat10.x = dot(u_xlat2.xyz, u_xlat10.xyz));
(u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0));

(u_xlat19 = dot(u_xlat2.xyz, _GlobalRimLightDir.xyz));
(u_xlat19 = clamp(u_xlat19, 0.0, 1.0));

(u_xlat10.x = max(u_xlat10.x, 9.9999997e-05));
(u_xlat10.x = ((-u_xlat10.x) + 1.0));
(u_xlat10.x = log2(u_xlat10.x));
(u_xlat10.x = (u_xlat10.x * _SpecularShiness));
(u_xlat10.x = exp2(u_xlat10.x));


(u_xlat0.xy = ((-u_xlat0.xy) + vec2(2.0, 1.0)));
(u_xlat0.x = ((-u_xlat10.x) + u_xlat0.x));
(u_xlat0.x = floor(u_xlat0.x));
(u_xlat0.x = ((-u_xlat0.x) + 1.0));
(u_xlat0.x = max(u_xlat0.x, 0.0));
(u_xlat10.x = ((u_xlat0.x * _SpecularShadowIntensity) + (-u_xlat0.x)));
(u_xlat0.x = ((u_xlat21 * u_xlat10.x) + u_xlat0.x));
(u_xlat18 = (u_xlat0.z * _SpecularIntensity));

(u_xlat3.y = 0.5);
(u_xlat16_2.xyz = texture(_SkinRamp, u_xlat3.xy).xyz);

(u_xlat10.xz = ((vs_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw));
(u_xlat16_4 = texture(_MainTex, u_xlat10.xz));
(u_xlat4 = (u_xlat16_4 * _AlbedoColor));

(u_xlat2.xyz = (u_xlat16_2.xyz * u_xlat4.xyz));
(u_xlat2.xyz = (u_xlat2.xyz * vec3(_SkinIntensity)));
(u_xlat2.xyz = ((u_xlat2.xyz * vec3(_SkinColor.x, _SkinColor.y, _SkinColor.z)) + (-u_xlat4.xyz)));
(u_xlat2.xyz = ((vec3(vec3(_SkinRate, _SkinRate, _SkinRate)) * u_xlat2.xyz) + u_xlat4.xyz));

(u_xlat3.xyz = (vec3(u_xlat18) * u_xlat2.xyz));
(u_xlat3.xyz = (u_xlat3.xyz * vec3(_SpecularColor.x, _SpecularColor.y, _SpecularColor.z)));
(u_xlat3.xyz = (u_xlat0.xxx * u_xlat3.xyz));

(u_xlat5.xyz = (u_xlat2.xyz * _NoShadowColor.xyz));
(u_xlat5.xyz = (u_xlat5.xyz * _XGlobalCharacterNoShadowColor.xyz));
(u_xlat6.xyz = (u_xlat2.xyz * _FirstShadowColor.xyz));
(u_xlat7.xyz = ((u_xlat6.xyz * _XGlobalCharacterOneShadowColor.xyz) + (-u_xlat5.xyz)));
(u_xlat1.xyw = ((u_xlat1.xxx * u_xlat7.xyz) + u_xlat5.xyz));
(u_xlat5.xyz = (u_xlat6.xyz * _XGlobalCharacterOneShadowColor.xyz));
(u_xlat2.xyz = (u_xlat2.xyz * _SecondShadowColor.xyz));
(u_xlat2.xyz = ((u_xlat2.xyz * _XGlobalCharacterTwoShadowColor.xyz) + (-u_xlat5.xyz)));
(u_xlat0.xyz = ((u_xlat0.yyy * u_xlat2.xyz) + u_xlat5.xyz));
(u_xlat0.xyz = ((-u_xlat1.xyw) + u_xlat0.xyz));
(u_xlat0.xyz = ((vec3(u_xlat29) * u_xlat0.xyz) + u_xlat1.xyw));

(u_xlat0.xyz = ((u_xlat3.xyz * _XGlobalCharSpecularColor.xyz) + u_xlat0.xyz));

(u_xlat1.xyw = (vs_TEXCOORD2.xyz + (-_WorldSpaceCameraPos.xyz)));
(u_xlat1.x = dot(u_xlat1.xyw, u_xlat1.xyw));
(u_xlat1.x = (u_xlat1.x + (-_RimDistanceMin)));
(u_xlat10.x = ((-_RimDistanceMin) + _RimDistanceMax));
(u_xlat10.x = (1.0 / u_xlat10.x));
(u_xlat1.x = (u_xlat10.x * u_xlat1.x));
(u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0));
(u_xlat10.x = ((u_xlat1.x * -2.0) + 3.0));
(u_xlat1.x = (u_xlat1.x * u_xlat1.x));
(u_xlat1.x = (u_xlat1.x * u_xlat10.x));
(u_xlat1.x = ((_GlobalEnableDistanceRim * (-u_xlat1.x)) + 1.0));
(u_xlat1.x = (u_xlat19 * u_xlat1.x));

(u_xlat10.x = u_xlat16_30);
(u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0));
(u_xlat10.x = ((-u_xlat10.x) + 1.0));
(u_xlat10.x = (u_xlat10.x + (-_RimMin)));
(u_xlat19 = ((-_RimMin) + _RimMax));
(u_xlat19 = (1.0 / u_xlat19));
(u_xlat10.x = (u_xlat19 * u_xlat10.x));
(u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0));
(u_xlat19 = (u_xlat10.x * u_xlat10.x));
(u_xlat10.x = ((u_xlat10.x * -2.0) + 3.0));
(u_xlat10.x = (u_xlat10.x * u_xlat19));
(u_xlat10.x = (u_xlat10.x * _RimIntensity));
(u_xlat19 = (u_xlat16_30 + _RimThreshold));

(u_xlat16_8.x = ((-abs(u_xlat16_30)) + 1.0));
(u_xlat16_8.x = max(u_xlat16_8.x, 0.001));
(u_xlat16_8.x = log2(u_xlat16_8.x));
(u_xlat16_8.x = (u_xlat16_8.x * _EffectRimFading));
(u_xlat16_8.x = exp2(u_xlat16_8.x));
(u_xlat16_8.xyz = (u_xlat16_8.xxx * _EffectRimColor.xyz));

(u_xlatb19 = (u_xlat19 >= 0.0));
(u_xlat19 = ((u_xlatb19) ? (1.0) : (0.0)));
(u_xlat10.x = (u_xlat19 * u_xlat10.x));
(u_xlat10.xyz = (u_xlat10.xxx * vec3(_RimColor.x, _RimColor.y, _RimColor.z)));
(u_xlat10.xyz = (u_xlat10.xyz * _XGlobalCharacterRimColor.xyz));
(u_xlat10.xyz = (u_xlat10.xyz * vs_TEXCOORD7.www));

(u_xlat0.xyz = ((u_xlat1.xxx * u_xlat10.xyz) + u_xlat0.xyz));
(u_xlat0.xyz = (u_xlat0.xyz * _XGlobalCharacterLightColor.xyz));
(u_xlat0.xyz = ((u_xlat0.xyz * vs_TEXCOORD5.xyz) + u_xlat0.xyz));
(u_xlat1.xyz = (u_xlat4.xyz * vec3(_EmissionIntensity)));
(SV_Target0.w = max(u_xlat4.w, 0.0));
(u_xlat1.xyz = (u_xlat1.xyz * vec3(_EmissionColor.x, _EmissionColor.y, _EmissionColor.z)));
(u_xlat0.xyz = ((u_xlat1.xyz * u_xlat0.www) + u_xlat0.xyz));
(u_xlat16_8.xyz = ((vec3(vec3(_EffectRimTransparency, _EffectRimTransparency, _EffectRimTransparency)) * u_xlat16_8.xyz) + u_xlat0.xyz));

(u_xlat0.xyz = (_XGlobalCharacterAmbientColor.xyz * _GlobalTint.xyz));
(u_xlat0.xyz = (u_xlat0.xyz * u_xlat16_8.xyz));

(u_xlat1.xyz = (u_xlat0.xyz * _BloomModColor.xyz));
(u_xlat1.xyz = ((u_xlat1.xyz * vec3(_BloomModIntensity)) + (-u_xlat0.xyz)));
(u_xlat0.xyz = ((vec3(vec3(_XPostBloom, _XPostBloom, _XPostBloom)) * u_xlat1.xyz) + u_xlat0.xyz));

(u_xlat0.xyz = (u_xlat0.xyz + (-_LinearFogColor.xyz)));
(u_xlat27 = max(vs_TEXCOORD6, 0.0));
(u_xlat27 = ((u_xlat27 * _LinearFogParams.x) + _LinearFogParams.y));
(u_xlat27 = clamp(u_xlat27, 0.0, 1.0));
(SV_Target0.xyz = ((vec3(u_xlat27) * u_xlat0.xyz) + _LinearFogColor.xyz));
return ;
}
