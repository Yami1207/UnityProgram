#version 330
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform vec3 _XGlobalCharSpecularColor;
uniform vec3 _XGlobalCharacterNoShadowColor;
uniform vec3 _XGlobalCharacterOneShadowColor;
uniform vec3 _XGlobalCharacterTwoShadowColor;
uniform vec3 _XGlobalCharacterRimColor;
uniform vec3 _XGlobalCharacterLightColor;
uniform vec3 _XGlobalCharacterLightDir;
uniform vec3 _XGlobalCharacterAmbientColor;
uniform float _EmissionIntensity;
uniform vec3 _EmissionColor;
uniform float _XPostBloom;
uniform vec4 _BloomModColor;
uniform float _BloomModIntensity;
uniform float _BumpScale;
uniform vec4 _BumpMap_ST;
uniform float _XShadowOffset;
uniform float _XShadowNormalBias;
uniform vec3 _XWorldSpaceShadowLightDir;
uniform vec4 _LinearFogColor;
uniform vec4 _LinearFogParams;
uniform vec4 _AlbedoColor;
uniform float _GlobalEnableDistanceRim;
uniform vec3 _GlobalRimLightDir;
uniform vec4 _MainTex_ST;
uniform vec4 _MaskTex_ST;
uniform vec4 _GlobalTint;
uniform float _FirstShadow;
uniform float _SecondShadow;
uniform vec3 _FirstShadowColor;
uniform vec3 _SecondShadowColor;
uniform float _SpecularShiness;
uniform float _SpecularIntensity;
uniform vec3 _SpecularColor;
uniform vec3 _NoShadowColor;
uniform float _SmoothFactor;
uniform float _RimMax;
uniform float _RimMin;
uniform float _RimIntensity;
uniform vec3 _RimColor;
uniform float _RimThreshold;
uniform float _RimDistanceMin;
uniform float _RimDistanceMax;
uniform vec4 _EffectRimColor;
uniform float _EffectRimFading;
uniform float _EffectRimTransparency;
uniform float _MatCapYScale;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _XShadowTexture;
uniform sampler2D _MatCapTex;
in vec4 vs_TEXCOORD0;
in vec4 vs_TEXCOORD1;
in vec4 vs_TEXCOORD2;
in vec4 vs_TEXCOORD3;
in vec3 vs_TEXCOORD5;
in float vs_TEXCOORD6;
in vec4 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat16_2;
vec4 u_xlat3;
vec2 u_xlat16_3;
vec4 u_xlat4;
vec4 u_xlat16_4;
vec4 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat16_7;
vec3 u_xlat8;
float u_xlat10;
float u_xlat16;
float u_xlat18;
float u_xlat19;
vec2 u_xlat16_19;
float u_xlat24;
float u_xlat25;
float u_xlat16_25;
bool u_xlatb25;
void main(){
(u_xlat0.xyz = (vs_TEXCOORD8.xyz / vs_TEXCOORD8.www));
(u_xlat0.xyz = ((u_xlat0.xyz * vec3(0.5, 0.5, 0.5)) + vec3(0.5, 0.5, 0.5)));
(u_xlatb1.xy = greaterThanEqual(u_xlat0.xyxx, vec4(0.1, 0.1, 0.0, 0.0)).xy);
(u_xlatb1.zw = greaterThanEqual(vec4(0.0, 0.0, 0.89999998, 0.89999998), u_xlat0.xxxy).zw);
(u_xlat1 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb1)));
(u_xlat24 = (u_xlat1.z * u_xlat1.x));
(u_xlat24 = (u_xlat1.y * u_xlat24));
(u_xlat24 = (((-u_xlat24) * u_xlat1.w) + 1.0));
(u_xlat16_1 = texture(_XShadowTexture, u_xlat0.xy));
(u_xlat0.x = dot(u_xlat16_1, vec4(1.0, 0.0039215689, 1.53787e-05, 6.0308629e-08)));
(u_xlat1.xy = ((vs_TEXCOORD0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw));
(u_xlat16_1.xyz = texture(_BumpMap, u_xlat1.xy).xyz);
(u_xlat1.xyz = ((u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0)) + vec3(-1.0, -1.0, -1.0)));
(u_xlat1.xy = (u_xlat1.xy * vec2(_BumpScale)));
(u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz));
(u_xlat2.y = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz));
(u_xlat2.z = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz));
(u_xlat8.x = dot(u_xlat2.xyz, u_xlat2.xyz));
(u_xlat8.x = inversesqrt(u_xlat8.x));
(u_xlat1.xyz = (u_xlat8.xxx * u_xlat2.xyz));
(u_xlat8.x = dot(u_xlat1.xyz, _XWorldSpaceShadowLightDir.xyz));
(u_xlat8.x = (((-u_xlat8.x) * u_xlat8.x) + 1.0));
(u_xlat8.x = sqrt(u_xlat8.x));
(u_xlat8.x = ((_XShadowNormalBias * u_xlat8.x) + _XShadowOffset));
(u_xlat8.x = ((-u_xlat8.x) + u_xlat0.z));
(u_xlatb0 = (u_xlat0.x >= u_xlat8.x));
(u_xlat0.x = ((u_xlatb0) ? (1.0) : (u_xlat24)));
(u_xlat8.x = dot(_XGlobalCharacterLightDir.xyz, _XGlobalCharacterLightDir.xyz));
(u_xlat8.x = inversesqrt(u_xlat8.x));
(u_xlat8.xyz = (u_xlat8.xxx * _XGlobalCharacterLightDir.xyz));
(u_xlat25 = dot(u_xlat1.xyz, u_xlat8.xyz));
(u_xlat25 = ((u_xlat25 * 0.5) + 0.5));
(u_xlat2.xy = ((vs_TEXCOORD0.xy * _MaskTex_ST.xy) + _MaskTex_ST.zw));
(u_xlat16_2 = texture(_MaskTex, u_xlat2.xy));
(u_xlat16_3.xy = ((-u_xlat16_2.yx) + vec2(1.5, 2.0)));
(u_xlat3.x = floor(u_xlat16_3.x));
(u_xlat3.x = ((-u_xlat3.x) + 1.0));
(u_xlat16_19.xy = ((u_xlat16_2.yy * vec2(1.2, 1.25)) + vec2(-0.1, -0.12)));
(u_xlat16_19.x = ((-u_xlat16_19.y) + u_xlat16_19.x));
(u_xlat3.x = ((u_xlat3.x * u_xlat16_19.x) + u_xlat16_19.y));
(u_xlat3.x = (u_xlat25 + u_xlat3.x));
(u_xlat25 = (u_xlat25 + u_xlat16_2.y));
(u_xlat25 = ((u_xlat25 * 0.5) + 1.0));
(u_xlat25 = (u_xlat25 + (-_SecondShadow)));
(u_xlat25 = floor(u_xlat25));
(u_xlat25 = ((-u_xlat25) + 1.0));
(u_xlat3.x = ((u_xlat3.x * 0.5) + 1.0));
(u_xlat3.x = (u_xlat3.x + (-_FirstShadow)));
(u_xlat3.x = (u_xlat3.x + -1.0));
(u_xlat3.x = max(u_xlat3.x, (-_SmoothFactor)));
(u_xlat3.x = min(u_xlat3.x, _SmoothFactor));
(u_xlat3.x = (u_xlat3.x + _SmoothFactor));
(u_xlat19 = (_SmoothFactor + _SmoothFactor));
(u_xlat3.x = (u_xlat3.x / u_xlat19));
(u_xlat0.x = ((u_xlat0.x * (-u_xlat3.x)) + 1.0));
(u_xlat3.xz = ((vs_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw));
(u_xlat16_4 = texture(_MainTex, u_xlat3.xz));
(u_xlat4 = (u_xlat16_4 * _AlbedoColor));
(u_xlat3.xzw = (u_xlat4.xyz * _NoShadowColor.xyz));
(u_xlat3.xzw = (u_xlat3.xzw * _XGlobalCharacterNoShadowColor.xyz));
(u_xlat5.xyz = (u_xlat4.xyz * _FirstShadowColor.xyz));
(u_xlat6.xyz = ((u_xlat5.xyz * _XGlobalCharacterOneShadowColor.xyz) + (-u_xlat3.xzw)));
(u_xlat3.xzw = ((u_xlat0.xxx * u_xlat6.xyz) + u_xlat3.xzw));
(u_xlat5.xyz = (u_xlat5.xyz * _XGlobalCharacterOneShadowColor.xyz));
(u_xlat6.xyz = (u_xlat4.xyz * _SecondShadowColor.xyz));
(u_xlat6.xyz = ((u_xlat6.xyz * _XGlobalCharacterTwoShadowColor.xyz) + (-u_xlat5.xyz)));
(u_xlat5.xyz = ((vec3(u_xlat25) * u_xlat6.xyz) + u_xlat5.xyz));
(u_xlat5.xyz = ((-u_xlat3.xzw) + u_xlat5.xyz));
(u_xlat0.x = (u_xlat16_2.y + 0.89999998));
(u_xlat0.x = floor(u_xlat0.x));
(u_xlat0.x = ((-u_xlat0.x) + 1.0));
(u_xlat3.xzw = ((u_xlat0.xxx * u_xlat5.xyz) + u_xlat3.xzw));
(u_xlat5.x = vs_TEXCOORD1.w);
(u_xlat5.y = vs_TEXCOORD2.w);
(u_xlat5.z = vs_TEXCOORD3.w);
(u_xlat6.xyz = ((-u_xlat5.xyz) + _WorldSpaceCameraPos.xyz));
(u_xlat5.xyz = (u_xlat5.xyz + (-_WorldSpaceCameraPos.xyz)));
(u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz));
(u_xlat0.x = (u_xlat0.x + (-_RimDistanceMin)));
(u_xlat25 = dot(u_xlat6.xyz, u_xlat6.xyz));
(u_xlat25 = inversesqrt(u_xlat25));
(u_xlat8.xyz = ((u_xlat6.xyz * vec3(u_xlat25)) + u_xlat8.xyz));
(u_xlat5.xyz = (vec3(u_xlat25) * u_xlat6.xyz));
(u_xlat16_25 = dot(u_xlat1.xyz, u_xlat5.xyz));
(u_xlat10 = dot(u_xlat8.xyz, u_xlat8.xyz));
(u_xlat10 = inversesqrt(u_xlat10));
(u_xlat8.xyz = (u_xlat8.xyz * vec3(u_xlat10)));
(u_xlat8.x = dot(u_xlat1.xyz, u_xlat8.xyz));
(u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0));
(u_xlat8.x = max(u_xlat8.x, 9.9999997e-05));
(u_xlat8.x = log2(u_xlat8.x));
(u_xlat8.x = (u_xlat8.x * _SpecularShiness));
(u_xlat8.x = exp2(u_xlat8.x));
(u_xlat8.x = ((-u_xlat8.x) + u_xlat16_3.y));
(u_xlat8.x = floor(u_xlat8.x));
(u_xlat8.x = ((-u_xlat8.x) + 1.0));
(u_xlat8.x = max(u_xlat8.x, 0.0));
(u_xlat16 = (u_xlat16_2.z * _SpecularIntensity));
(u_xlat5.xyz = (u_xlat4.xyz * vec3(u_xlat16)));
(u_xlat5.xyz = (u_xlat5.xyz * vec3(_SpecularColor.x, _SpecularColor.y, _SpecularColor.z)));
(u_xlat8.xyz = (u_xlat8.xxx * u_xlat5.xyz));
(u_xlat8.xyz = ((u_xlat8.xyz * _XGlobalCharSpecularColor.xyz) + u_xlat3.xzw));
(u_xlat10 = u_xlat16_25);
(u_xlat10 = clamp(u_xlat10, 0.0, 1.0));
(u_xlat10 = ((-u_xlat10) + 1.0));
(u_xlat10 = (u_xlat10 + (-_RimMin)));
(u_xlat18 = ((-_RimMin) + _RimMax));
(u_xlat18 = (1.0 / u_xlat18));
(u_xlat10 = (u_xlat18 * u_xlat10));
(u_xlat10 = clamp(u_xlat10, 0.0, 1.0));
(u_xlat18 = (u_xlat10 * u_xlat10));
(u_xlat10 = ((u_xlat10 * -2.0) + 3.0));
(u_xlat10 = (u_xlat10 * u_xlat18));
(u_xlat10 = (u_xlat10 * _RimIntensity));
(u_xlat18 = (u_xlat16_25 + _RimThreshold));
(u_xlat16_7.x = ((-abs(u_xlat16_25)) + 1.0));
(u_xlat16_7.x = max(u_xlat16_7.x, 0.001));
(u_xlat16_7.x = log2(u_xlat16_7.x));
(u_xlat16_7.x = (u_xlat16_7.x * _EffectRimFading));
(u_xlat16_7.x = exp2(u_xlat16_7.x));
(u_xlat16_7.xyz = (u_xlat16_7.xxx * _EffectRimColor.xyz));
(u_xlatb25 = (u_xlat18 >= 0.0));
(u_xlat25 = ((u_xlatb25) ? (1.0) : (0.0)));
(u_xlat25 = (u_xlat25 * u_xlat10));
(u_xlat3.xyz = (vec3(u_xlat25) * _RimColor.xyz));
(u_xlat3.xyz = (u_xlat3.xyz * _XGlobalCharacterRimColor.xyz));
(u_xlat25 = ((-_RimDistanceMin) + _RimDistanceMax));
(u_xlat25 = (1.0 / u_xlat25));
(u_xlat0.x = (u_xlat0.x * u_xlat25));
(u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0));
(u_xlat25 = ((u_xlat0.x * -2.0) + 3.0));
(u_xlat0.x = (u_xlat0.x * u_xlat0.x));
(u_xlat0.x = (u_xlat0.x * u_xlat25));
(u_xlat0.x = ((_GlobalEnableDistanceRim * (-u_xlat0.x)) + 1.0));
(u_xlat25 = dot(u_xlat1.xyz, _GlobalRimLightDir.xyz));
(u_xlat25 = clamp(u_xlat25, 0.0, 1.0));
(u_xlat0.x = (u_xlat0.x * u_xlat25));
(u_xlat0.xyz = ((u_xlat0.xxx * u_xlat3.xyz) + u_xlat8.xyz));
(u_xlat0.xyz = (u_xlat0.xyz * _XGlobalCharacterLightColor.xyz));
(u_xlat0.xyz = ((u_xlat0.xyz * vs_TEXCOORD5.xyz) + u_xlat0.xyz));
(u_xlat3 = (u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToObject[1]));
(u_xlat3 = ((hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat1.xxxx) + u_xlat3));
(u_xlat3 = ((hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat1.zzzz) + u_xlat3));
(u_xlat5 = (hlslcc_mtx4x4unity_WorldToObject[1] * hlslcc_mtx4x4unity_MatrixInvV[1].yyyy));
(u_xlat5 = ((hlslcc_mtx4x4unity_WorldToObject[0] * hlslcc_mtx4x4unity_MatrixInvV[1].xxxx) + u_xlat5));
(u_xlat5 = ((hlslcc_mtx4x4unity_WorldToObject[2] * hlslcc_mtx4x4unity_MatrixInvV[1].zzzz) + u_xlat5));
(u_xlat5 = ((hlslcc_mtx4x4unity_WorldToObject[3] * hlslcc_mtx4x4unity_MatrixInvV[1].wwww) + u_xlat5));
(u_xlat24 = dot(u_xlat5, u_xlat3));
(u_xlat1.x = ((-_MatCapYScale) + 1.0));
(u_xlat24 = (u_xlat24 * u_xlat1.x));
(u_xlat1.y = ((u_xlat1.y * _MatCapYScale) + u_xlat24));
(u_xlat5 = (hlslcc_mtx4x4unity_WorldToObject[1] * hlslcc_mtx4x4unity_MatrixInvV[2].yyyy));
(u_xlat5 = ((hlslcc_mtx4x4unity_WorldToObject[0] * hlslcc_mtx4x4unity_MatrixInvV[2].xxxx) + u_xlat5));
(u_xlat5 = ((hlslcc_mtx4x4unity_WorldToObject[2] * hlslcc_mtx4x4unity_MatrixInvV[2].zzzz) + u_xlat5));
(u_xlat5 = ((hlslcc_mtx4x4unity_WorldToObject[3] * hlslcc_mtx4x4unity_MatrixInvV[2].wwww) + u_xlat5));
(u_xlat1.z = dot(u_xlat5, u_xlat3));
(u_xlat5 = (hlslcc_mtx4x4unity_WorldToObject[1] * hlslcc_mtx4x4unity_MatrixInvV[3].yyyy));
(u_xlat5 = ((hlslcc_mtx4x4unity_WorldToObject[0] * hlslcc_mtx4x4unity_MatrixInvV[3].xxxx) + u_xlat5));
(u_xlat5 = ((hlslcc_mtx4x4unity_WorldToObject[2] * hlslcc_mtx4x4unity_MatrixInvV[3].zzzz) + u_xlat5));
(u_xlat5 = ((hlslcc_mtx4x4unity_WorldToObject[3] * hlslcc_mtx4x4unity_MatrixInvV[3].wwww) + u_xlat5));
(u_xlat1.w = dot(u_xlat5, u_xlat3));
(u_xlat5 = (hlslcc_mtx4x4unity_WorldToObject[1] * hlslcc_mtx4x4unity_MatrixInvV[0].yyyy));
(u_xlat5 = ((hlslcc_mtx4x4unity_WorldToObject[0] * hlslcc_mtx4x4unity_MatrixInvV[0].xxxx) + u_xlat5));
(u_xlat5 = ((hlslcc_mtx4x4unity_WorldToObject[2] * hlslcc_mtx4x4unity_MatrixInvV[0].zzzz) + u_xlat5));
(u_xlat5 = ((hlslcc_mtx4x4unity_WorldToObject[3] * hlslcc_mtx4x4unity_MatrixInvV[0].wwww) + u_xlat5));
(u_xlat1.x = dot(u_xlat5, u_xlat3));
(u_xlat24 = dot(u_xlat1, u_xlat1));
(u_xlat24 = inversesqrt(u_xlat24));
(u_xlat1.xy = (vec2(u_xlat24) * u_xlat1.xy));
(u_xlat1.xy = ((u_xlat1.xy * vec2(0.5, 0.5)) + vec2(0.5, 0.5)));
(u_xlat16_1.xyz = texture(_MatCapTex, u_xlat1.xy).xyz);
(u_xlat0.xyz = ((u_xlat16_1.xyz * u_xlat16_2.xxx) + u_xlat0.xyz));
(u_xlat1.xyz = (u_xlat4.xyz * vec3(_EmissionIntensity)));
(SV_Target0.w = max(u_xlat4.w, 0.0));
(u_xlat1.xyz = (u_xlat1.xyz * vec3(_EmissionColor.x, _EmissionColor.y, _EmissionColor.z)));
(u_xlat0.xyz = ((u_xlat1.xyz * u_xlat16_2.www) + u_xlat0.xyz));
(u_xlat16_7.xyz = ((vec3(vec3(_EffectRimTransparency, _EffectRimTransparency, _EffectRimTransparency)) * u_xlat16_7.xyz) + u_xlat0.xyz));
(u_xlat0.xyz = (_XGlobalCharacterAmbientColor.xyz * _GlobalTint.xyz));
(u_xlat0.xyz = (u_xlat0.xyz * u_xlat16_7.xyz));
(u_xlat1.xyz = (u_xlat0.xyz * _BloomModColor.xyz));
(u_xlat1.xyz = ((u_xlat1.xyz * vec3(_BloomModIntensity)) + (-u_xlat0.xyz)));
(u_xlat0.xyz = ((vec3(vec3(_XPostBloom, _XPostBloom, _XPostBloom)) * u_xlat1.xyz) + u_xlat0.xyz));
(u_xlat0.xyz = (u_xlat0.xyz + (-_LinearFogColor.xyz)));
(u_xlat24 = max(vs_TEXCOORD6, 0.0));
(u_xlat24 = ((u_xlat24 * _LinearFogParams.x) + _LinearFogParams.y));
(u_xlat24 = clamp(u_xlat24, 0.0, 1.0));
(SV_Target0.xyz = ((vec3(u_xlat24) * u_xlat0.xyz) + _LinearFogColor.xyz));
return ;
}
