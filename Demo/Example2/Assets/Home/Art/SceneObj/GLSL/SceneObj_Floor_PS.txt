#version 330
uniform vec3 _WorldSpaceCameraPos;
uniform vec3 _XGlobalLightColor;
uniform vec3 _XGlobalDynamicAmbientColor;
uniform vec3 _XGlobalSpecularColor;
uniform vec3 _XGlobalLightDir;
uniform float _BloomFactor;
uniform float _XPostBloom;
uniform vec4 _BloomModColor;
uniform float _BloomModIntensity;
uniform vec4 _XSceneDarkColor;
uniform float _XSceneGray;
uniform float _Mirror_Reflection;
uniform vec4 hlslcc_mtx4x4_XMirrorNormalRotateMatrix[4];
uniform float _BumpScale;
uniform vec4 _BumpMap_ST;
uniform vec4 _SceneLinearFogColor;
uniform vec4 _SceneLinearFogParams;
uniform vec4 _Color;
uniform vec4 _MainTex_ST;
uniform float _Metallic;
uniform float _Roughness;
uniform float _AOScale;
uniform vec3 _SpecularColor;
uniform float _SpecularIntensity;
uniform vec3 _CubemapColor;
uniform float _CubemapIntensity;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _XMirrorTex;
uniform samplerCube _XGlobalCubeMap;
in vec4 vs_TEXCOORD0;
in vec4 vs_TEXCOORD2;
in vec4 vs_TEXCOORD3;
in vec4 vs_TEXCOORD4;
in float vs_TEXCOORD5;
in vec4 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat16_3;
vec3 u_xlat4;
vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat16_5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat16_7;
float u_xlat12;
vec2 u_xlat15;
float u_xlat18;
void main(){
(u_xlat0.x = (((-_Roughness) * 0.69999999) + 1.7));
(u_xlat0.x = (u_xlat0.x * _Roughness));
(u_xlat0.x = (u_xlat0.x * 8.0));

// u_xlat1:世界坐标
(u_xlat1.x = vs_TEXCOORD2.w);
(u_xlat1.y = vs_TEXCOORD3.w);
(u_xlat1.z = vs_TEXCOORD4.w);

// u_xlat7:viewDirection
(u_xlat6.xyz = ((-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz));
(u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz));
(u_xlat1.x = inversesqrt(u_xlat1.x));
(u_xlat7.xyz = (u_xlat6.xyz * u_xlat1.xxx));

// u_xlat6:H
(u_xlat6.xyz = ((u_xlat6.xyz * u_xlat1.xxx) + _XGlobalLightDir.xyz));

// u_xlat2:法线
(u_xlat2.xy = ((vs_TEXCOORD0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw));
(u_xlat16_2.xyz = texture(_BumpMap, u_xlat2.xy).xyz);
(u_xlat2.xyz = ((u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0)) + vec3(-1.0, -1.0, -1.0)));
(u_xlat2.xy = (u_xlat2.xy * vec2(_BumpScale)));
(u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz));
(u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz));
(u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz));
(u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz));
(u_xlat1.x = inversesqrt(u_xlat1.x));
(u_xlat2.xyz = (u_xlat1.xxx * u_xlat3.xyz));

// u_xlat16_7:encodedIrradiance(环境反射)
(u_xlat1.x = dot((-u_xlat7.xyz), u_xlat2.xyz));
(u_xlat1.x = (u_xlat1.x + u_xlat1.x));
(u_xlat3.xyz = ((u_xlat2.xyz * (-u_xlat1.xxx)) + (-u_xlat7.xyz)));
(u_xlat1.x = dot(u_xlat2.xyz, u_xlat7.xyz));
(u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0));
(u_xlat1.x = (u_xlat1.x * -9.2799997));
(u_xlat1.x = exp2(u_xlat1.x));
(u_xlat16_3 = textureLod(_XGlobalCubeMap, u_xlat3.xyz, u_xlat0.x));
(u_xlat16_7.xyz = (u_xlat16_3.www * u_xlat16_3.xyz));

// 
(u_xlat3 = ((vec4(vec4(_Roughness, _Roughness, _Roughness, _Roughness)) * vec4(-1.0, -0.0275, -0.57200003, 0.022)) + vec4(1.0, 0.0425, 1.04, -0.039999999)));
(u_xlat0.x = (u_xlat3.x * u_xlat3.x));
(u_xlat0.x = min(u_xlat1.x, u_xlat0.x));
(u_xlat0.x = ((u_xlat0.x * u_xlat3.x) + u_xlat3.y));
(u_xlat3.xy = ((u_xlat0.xx * vec2(-1.04, 1.04)) + u_xlat3.zw));

(u_xlat15.xy = ((vs_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw));
(u_xlat16_4 = texture(_MainTex, u_xlat15.xy));
(u_xlat16_5.xyz = ((u_xlat16_4.xyz * _Color.xyz) + vec3(-0.039999999, -0.039999999, -0.039999999)));
(u_xlat16_4 = (u_xlat16_4 * _Color));

// u_xlat5:SpecularColor
(u_xlat5.xyz = ((vec3(_Metallic) * u_xlat16_5.xyz) + vec3(0.039999999, 0.039999999, 0.039999999)));
(u_xlat5.xyz = (u_xlat5.xyz * vec3(_SpecularColor.x, _SpecularColor.y, _SpecularColor.z)));
(u_xlat5.xyz = (u_xlat5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity))));
(u_xlat0.x = (u_xlat5.y * 50.0));
(u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0));

// u_xlat3:brdf
(u_xlat0.x = (u_xlat0.x * u_xlat3.y));
(u_xlat3.xyz = ((u_xlat5.xyz * u_xlat3.xxx) + u_xlat0.xxx));

// u_xlat1: encodedIrradiance * brdf
(u_xlat1.xyz = (u_xlat16_7.xyz * u_xlat3.xyz));

// u_xlat1: indirectLightColor
(u_xlat1.xyz = (u_xlat1.xyz * _XGlobalSpecularColor.xyz));
(u_xlat1.xyz = (u_xlat1.xyz * _CubemapColor.xyz));
(u_xlat1.xyz = (u_xlat1.xyz * vec3(vec3(_CubemapIntensity, _CubemapIntensity, _CubemapIntensity))));
(u_xlat1.xyz = (u_xlat1.xyz * vec3(_AOScale)));
(u_xlat1.xyz = (u_xlat1.xyz * vec3(6.0, 6.0, 6.0)));


(u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz));
(u_xlat0.x = inversesqrt(u_xlat0.x));
(u_xlat0.xyz = (u_xlat0.xxx * u_xlat6.xyz));
(u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz));
(u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0));

(u_xlat6.x = (_Roughness * _Roughness));
(u_xlat6.x = max(u_xlat6.x, 0.0020000001));
(u_xlat6.x = (u_xlat6.x * u_xlat6.x));

(u_xlat12 = ((u_xlat0.x * u_xlat6.x) + (-u_xlat0.x)));
(u_xlat0.x = ((u_xlat12 * u_xlat0.x) + 1.00001));
(u_xlat0.x = ((u_xlat0.x * u_xlat0.x) + 1e-07));
(u_xlat6.x = (u_xlat6.x * 0.31830987));
(u_xlat0.x = (u_xlat6.x / u_xlat0.x));

(u_xlat0.xyz = (u_xlat3.xyz * u_xlat0.xxx));


(u_xlat0.xyz = (u_xlat0.xyz * _XGlobalLightColor.xyz));
(u_xlat18 = dot(u_xlat2.xyz, _XGlobalLightDir.xyz));
(u_xlat18 = clamp(u_xlat18, 0.0, 1.0));
(u_xlat0.xyz = ((u_xlat0.xyz * vec3(u_xlat18)) + u_xlat1.xyz));

(u_xlat1.x = ((_Metallic * -0.95999998) + 0.95999998));
(u_xlat1.xyz = (u_xlat1.xxx * u_xlat16_4.xyz));

(u_xlat3.w = (u_xlat16_4.w * _BloomFactor));

(u_xlat4.xyz = (_XGlobalDynamicAmbientColor.xyz * vec3(_AOScale)));
(u_xlat4.xyz = ((_XGlobalLightColor.xyz * vec3(u_xlat18)) + u_xlat4.xyz));
(u_xlat0.xyz = ((u_xlat1.xyz * u_xlat4.xyz) + u_xlat0.xyz));

// 反射效果
(u_xlat1.xy = (u_xlat2.yy * hlslcc_mtx4x4_XMirrorNormalRotateMatrix[1].xz));
(u_xlat1.xy = ((hlslcc_mtx4x4_XMirrorNormalRotateMatrix[0].xz * u_xlat2.xx) + u_xlat1.xy));
(u_xlat1.xy = ((hlslcc_mtx4x4_XMirrorNormalRotateMatrix[2].xz * u_xlat2.zz) + u_xlat1.xy));
(u_xlat1.xy = (u_xlat1.xy + vs_TEXCOORD8.xy));
(u_xlat1.xy = (u_xlat1.xy / vs_TEXCOORD8.ww));
(u_xlat16_1.xyz = texture(_XMirrorTex, u_xlat1.xy).xyz);
(u_xlat1.xyz = ((-u_xlat0.xyz) + u_xlat16_1.xyz));
(u_xlat0.xyz = ((vec3(_Mirror_Reflection) * u_xlat1.xyz) + u_xlat0.xyz));

// mix bloom color
(u_xlat1.xyz = (u_xlat0.xyz * _BloomModColor.xyz));
(u_xlat1.xyz = ((u_xlat1.xyz * vec3(_BloomModIntensity)) + (-u_xlat0.xyz)));
(u_xlat3.xyz = ((vec3(vec3(_XPostBloom, _XPostBloom, _XPostBloom)) * u_xlat1.xyz) + u_xlat0.xyz));

// fog
(u_xlat0 = (u_xlat3 + (-_SceneLinearFogColor)));
(u_xlat1.x = max(vs_TEXCOORD5, 0.0));
(u_xlat1.x = ((u_xlat1.x * _SceneLinearFogParams.x) + _SceneLinearFogParams.y));
(u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0));
(u_xlat0 = ((u_xlat1.xxxx * u_xlat0) + _SceneLinearFogColor));


(u_xlat1.x = dot(u_xlat0.xy, vec2(0.30000001, 0.58999997)));
(u_xlat1.xyz = ((u_xlat0.xyz * vec3(0.11, 0.11, 0.11)) + u_xlat1.xxx));
(u_xlat1.xyz = ((-u_xlat0.xyz) + u_xlat1.xyz));
(u_xlat0.xyz = ((vec3(_XSceneGray) * u_xlat1.xyz) + u_xlat0.xyz));
(SV_Target0.w = max(u_xlat0.w, 0.0));
(u_xlat1.xyz = ((u_xlat0.xyz * _XSceneDarkColor.xyz) + (-u_xlat0.xyz)));
(SV_Target0.xyz = ((_XSceneDarkColor.www * u_xlat1.xyz) + u_xlat0.xyz));
return ;
}
