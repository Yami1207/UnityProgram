#version 330
uniform vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform vec4 _ShadowVolumeSource;
uniform float _ShadowVolumeMinHeight;
uniform float _ShadowVolumeExtrudeBias;
uniform float _ShadowVolumeExtrudeAmount;
uniform float _ShadowVolumeBiasOffset;
in vec4 in_POSITION0;
in vec3 in_NORMAL0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
vec2 u_xlat3;
vec3 u_xlat4;
float u_xlat8;
float u_xlat12;
void main(){
// u_xlat0:法线
(u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz));
(u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz));
(u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz));
(u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz));
(u_xlat12 = inversesqrt(u_xlat12));
(u_xlat0.xyz = (vec3(u_xlat12) * u_xlat0.xyz));


(u_xlat12 = dot(_ShadowVolumeSource.xyz, _ShadowVolumeSource.xyz));
(u_xlat12 = inversesqrt(u_xlat12));

// u_xlat1:世界坐标
(u_xlat1.xyz = (in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz));
(u_xlat1.xyz = ((hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx) + u_xlat1.xyz));
(u_xlat1.xyz = ((hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz) + u_xlat1.xyz));
(u_xlat1.xyz = ((hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www) + u_xlat1.xyz));

// u_xlat2：投影方向
(u_xlat2.xyz = (u_xlat1.xyz * _ShadowVolumeSource.www));
(u_xlat2.xyz = ((_ShadowVolumeSource.xyz * vec3(u_xlat12)) + (-u_xlat2.xyz)));
(u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz));
(u_xlat12 = inversesqrt(u_xlat12));
(u_xlat2.xyz = (vec3(u_xlat12) * u_xlat2.xyz));

// u_xlat0.x:背面
(u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz));
(u_xlatb0 = (0.0 >= u_xlat0.x));
(u_xlat0.x = ((u_xlatb0) ? (1.0) : (0.0)));


(u_xlat4.x = ((_ShadowVolumeExtrudeAmount * u_xlat0.x) + _ShadowVolumeExtrudeBias));
(u_xlat4.x = (u_xlat4.x + _ShadowVolumeBiasOffset));

(u_xlat8 = ((u_xlat2.y * (-u_xlat4.x)) + 0.001));
(u_xlat12 = ((-u_xlat1.y) + _ShadowVolumeMinHeight));
(u_xlat8 = (u_xlat12 / u_xlat8));

(u_xlat3.xy = ((-u_xlat4.xx) * u_xlat2.xz));
(u_xlat2.xyz = ((u_xlat2.xyz * (-u_xlat4.xxx)) + u_xlat1.xyz));
(u_xlat1.xz = ((u_xlat3.xy * vec2(u_xlat8)) + u_xlat1.xz));
(u_xlat1.y = _ShadowVolumeMinHeight);

// lerp(u_xlat2, u_xlat1, u_xlat0.x)
(u_xlat4.xyz = ((-u_xlat2.xyz) + u_xlat1.xyz));
(u_xlat0.xyz = ((u_xlat0.xxx * u_xlat4.xyz) + u_xlat2.xyz));


(u_xlat1 = (u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1]));
(u_xlat1 = ((hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx) + u_xlat1));
(u_xlat0 = ((hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz) + u_xlat1));
(gl_Position = (u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3]));
return ;
}
