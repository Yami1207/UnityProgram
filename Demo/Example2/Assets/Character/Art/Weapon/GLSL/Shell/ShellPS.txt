#version 330
uniform vec3 _WorldSpaceCameraPos;
uniform vec3 _XGlobalCharSpecularColor;
uniform vec3 _XGlobalCharacterNoShadowColor;
uniform vec3 _XGlobalCharacterOneShadowColor;
uniform vec3 _XGlobalCharacterTwoShadowColor;
uniform vec3 _XGlobalCharacterLightColor;
uniform vec3 _XGlobalCharacterLightDir;
uniform vec3 _XGlobalCharacterAmbientColor;
uniform float _BloomFactor;
uniform float _EmissionIntensity;
uniform vec3 _EmissionColor;
uniform float _EmissionBloomFactor;
uniform float _XPostBloom;
uniform vec4 _BloomModColor;
uniform float _BloomModIntensity;
uniform float _BumpScale;
uniform vec4 _BumpMap_ST;
uniform vec4 _LinearFogColor;
uniform vec4 _LinearFogParams;
uniform vec4 _AlbedoColor;
uniform vec4 _MainTex_ST;
uniform vec4 _MaskTex_ST;
uniform vec4 _GlobalTint;
uniform float _FirstShadow;
uniform float _SecondShadow;
uniform vec3 _FirstShadowColor;
uniform vec3 _SecondShadowColor;
uniform float _SpecularShiness;
uniform float _SpecularIntensity;
uniform vec3 _SpecularColor;
uniform vec3 _NoShadowColor;
uniform float _SmoothFactor;
uniform vec4 _EffectRimColor;
uniform float _EffectRimFading;
uniform float _EffectRimTransparency;
uniform float _Roughness;
uniform float _Metallic;
uniform float _PBRRate;
uniform vec4 _DirectLightColor;
uniform vec4 _IndirectLightColor;
uniform float _IndirectLightIntensity;
uniform vec4 _PBRSpecularColor;
uniform float _PBRSpecularIntensity;
uniform vec4 _CubemapColor;
uniform float _CubemapIntensity;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform samplerCube _CubeMap;
in vec4 vs_TEXCOORD0;
in vec4 vs_TEXCOORD1;
in vec4 vs_TEXCOORD2;
in vec4 vs_TEXCOORD3;
in vec3 vs_TEXCOORD5;
in float vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat16_3;
vec3 u_xlat16_4;
vec3 u_xlat5;
vec4 u_xlat16_5;
vec3 u_xlat6;
vec4 u_xlat16_7;
vec2 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat16_9;
vec3 u_xlat16_11;
vec2 u_xlat18;
vec2 u_xlat21;
float u_xlat27;
float u_xlat16_27;
float u_xlat28;
float u_xlat29;
void main(){
(u_xlat0.x = (((-_Roughness) * 0.69999999) + 1.7));
(u_xlat0.x = (u_xlat0.x * _Roughness));
(u_xlat0.x = (u_xlat0.x * 8.0));
(u_xlat9.xy = ((vs_TEXCOORD0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw));
(u_xlat16_9.xyz = texture(_BumpMap, u_xlat9.xy).xyz);
(u_xlat9.xyz = ((u_xlat16_9.xyz * vec3(2.0, 2.0, 2.0)) + vec3(-1.0, -1.0, -1.0)));
(u_xlat9.xy = (u_xlat9.xy * vec2(_BumpScale)));
(u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat9.xyz));
(u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz));
(u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat9.xyz));
(u_xlat9.x = dot(u_xlat1.xyz, u_xlat1.xyz));
(u_xlat9.x = inversesqrt(u_xlat9.x));
(u_xlat9.xyz = (u_xlat9.xxx * u_xlat1.xyz));
(u_xlat1.x = vs_TEXCOORD1.w);
(u_xlat1.y = vs_TEXCOORD2.w);
(u_xlat1.z = vs_TEXCOORD3.w);
(u_xlat1.xyz = ((-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz));
(u_xlat28 = dot(u_xlat1.xyz, u_xlat1.xyz));
(u_xlat28 = inversesqrt(u_xlat28));
(u_xlat2.xyz = (vec3(u_xlat28) * u_xlat1.xyz));
(u_xlat29 = dot((-u_xlat2.xyz), u_xlat9.xyz));
(u_xlat29 = (u_xlat29 + u_xlat29));
(u_xlat3.xyz = ((u_xlat9.xyz * (-vec3(u_xlat29))) + (-u_xlat2.xyz)));
(u_xlat16_2 = dot(u_xlat9.xyz, u_xlat2.xyz));
(u_xlat16_3 = textureLod(_CubeMap, u_xlat3.xyz, u_xlat0.x));
(u_xlat16_11.xyz = (u_xlat16_3.www * u_xlat16_3.xyz));
(u_xlat0.x = u_xlat16_2);
(u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0));
(u_xlat16_4.x = ((-abs(u_xlat16_2)) + 1.0));
(u_xlat16_4.x = max(u_xlat16_4.x, 0.001));
(u_xlat16_4.x = log2(u_xlat16_4.x));
(u_xlat16_4.x = (u_xlat16_4.x * _EffectRimFading));
(u_xlat16_4.x = exp2(u_xlat16_4.x));
(u_xlat16_4.xyz = (u_xlat16_4.xxx * _EffectRimColor.xyz));
(u_xlat0.x = (u_xlat0.x * -9.2799997));
(u_xlat0.x = exp2(u_xlat0.x));
(u_xlat3 = ((vec4(vec4(_Roughness, _Roughness, _Roughness, _Roughness)) * vec4(-1.0, -0.0275, -0.57200003, 0.022)) + vec4(1.0, 0.0425, 1.04, -0.039999999)));
(u_xlat2.x = (u_xlat3.x * u_xlat3.x));
(u_xlat0.x = min(u_xlat0.x, u_xlat2.x));
(u_xlat0.x = ((u_xlat0.x * u_xlat3.x) + u_xlat3.y));
(u_xlat3.xy = ((u_xlat0.xx * vec2(-1.04, 1.04)) + u_xlat3.zw));
(u_xlat21.xy = ((vs_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw));
(u_xlat16_5 = texture(_MainTex, u_xlat21.xy));
(u_xlat6.xyz = ((u_xlat16_5.xyz * _AlbedoColor.xyz) + vec3(-0.039999999, -0.039999999, -0.039999999)));
(u_xlat6.xyz = ((vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat6.xyz) + vec3(0.039999999, 0.039999999, 0.039999999)));
(u_xlat6.xyz = (u_xlat6.xyz * _PBRSpecularColor.xyz));
(u_xlat0.x = (u_xlat6.y * 50.0));
(u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0));
(u_xlat0.x = (u_xlat0.x * u_xlat3.y));
(u_xlat3.xyz = ((u_xlat6.xyz * u_xlat3.xxx) + u_xlat0.xxx));
(u_xlat2.xyz = (u_xlat16_11.xyz * u_xlat3.xyz));
(u_xlat2.xyz = (u_xlat2.xyz * _CubemapColor.xyz));
(u_xlat2.xyz = (u_xlat2.xyz * vec3(_CubemapIntensity)));
(u_xlat2.xyz = (u_xlat2.xyz * vec3(6.0, 6.0, 6.0)));
(u_xlat0.x = dot(_XGlobalCharacterLightDir.xyz, _XGlobalCharacterLightDir.xyz));
(u_xlat0.x = inversesqrt(u_xlat0.x));
(u_xlat6.xyz = (u_xlat0.xxx * _XGlobalCharacterLightDir.xyz));
(u_xlat1.xyz = ((u_xlat1.xyz * vec3(u_xlat28)) + u_xlat6.xyz));
(u_xlat0.x = dot(u_xlat9.xyz, u_xlat6.xyz));
(u_xlat28 = dot(u_xlat1.xyz, u_xlat1.xyz));
(u_xlat28 = inversesqrt(u_xlat28));
(u_xlat1.xyz = (vec3(u_xlat28) * u_xlat1.xyz));
(u_xlat9.x = dot(u_xlat9.xyz, u_xlat1.xyz));
(u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0));
(u_xlat18.x = (_Roughness * _Roughness));
(u_xlat18.x = max(u_xlat18.x, 0.0020000001));
(u_xlat18.x = (u_xlat18.x * u_xlat18.x));
(u_xlat27 = ((u_xlat9.x * u_xlat18.x) + (-u_xlat9.x)));
(u_xlat18.x = (u_xlat18.x * 0.31830987));
(u_xlat27 = ((u_xlat27 * u_xlat9.x) + 1.00001));
(u_xlat9.x = max(u_xlat9.x, 9.9999997e-05));
(u_xlat9.x = log2(u_xlat9.x));
(u_xlat9.x = (u_xlat9.x * _SpecularShiness));
(u_xlat9.x = exp2(u_xlat9.x));
(u_xlat27 = ((u_xlat27 * u_xlat27) + 1e-07));
(u_xlat18.x = (u_xlat18.x / u_xlat27));
(u_xlat1.xyz = (u_xlat18.xxx * u_xlat3.xyz));
(u_xlat1.xyz = ((u_xlat1.xyz * vec3(_PBRSpecularIntensity)) + u_xlat2.xyz));
(u_xlat1.xyz = (u_xlat1.xyz * _DirectLightColor.xyz));
(u_xlat18.x = ((_Metallic * -0.95999998) + 0.95999998));
(u_xlat3 = (u_xlat16_5 * _AlbedoColor));
(u_xlat6.xyz = (u_xlat18.xxx * u_xlat3.xyz));
(u_xlat6.xyz = (u_xlat6.xyz * _IndirectLightColor.xyz));
(u_xlat2.xyz = ((u_xlat6.xyz * vec3(_IndirectLightIntensity)) + u_xlat2.xyz));
(u_xlat18.x = u_xlat0.x);
(u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0));
(u_xlat0.x = ((u_xlat0.x * 0.5) + 0.5));
(u_xlat1.xyz = ((u_xlat1.xyz * u_xlat18.xxx) + u_xlat2.xyz));
(u_xlat1.xyz = (((-u_xlat16_5.xyz) * _AlbedoColor.xyz) + u_xlat1.xyz));
(u_xlat1.xyz = ((vec3(vec3(_PBRRate, _PBRRate, _PBRRate)) * u_xlat1.xyz) + u_xlat3.xyz));
(u_xlat2.xyz = (u_xlat1.xyz * _NoShadowColor.xyz));
(u_xlat2.xyz = (u_xlat2.xyz * _XGlobalCharacterNoShadowColor.xyz));
(u_xlat5.xyz = (u_xlat1.xyz * _FirstShadowColor.xyz));
(u_xlat6.xyz = ((u_xlat5.xyz * _XGlobalCharacterOneShadowColor.xyz) + (-u_xlat2.xyz)));
(u_xlat5.xyz = (u_xlat5.xyz * _XGlobalCharacterOneShadowColor.xyz));
(u_xlat18.xy = ((vs_TEXCOORD0.xy * _MaskTex_ST.xy) + _MaskTex_ST.zw));
(u_xlat16_7 = texture(_MaskTex, u_xlat18.xy));
(u_xlat9.yz = ((-u_xlat16_7.yx) + vec2(1.5, 2.0)));
(u_xlat9.x = ((-u_xlat9.x) + u_xlat9.z));
(u_xlat9.xy = floor(u_xlat9.xy));
(u_xlat9.xy = ((-u_xlat9.xy) + vec2(1.0, 1.0)));
(u_xlat9.x = max(u_xlat9.x, 0.0));
(u_xlat16_8.xy = ((u_xlat16_7.yy * vec2(1.2, 1.25)) + vec2(-0.1, -0.12)));
(u_xlat16_27 = ((-u_xlat16_8.y) + u_xlat16_8.x));
(u_xlat18.x = ((u_xlat9.y * u_xlat16_27) + u_xlat16_8.y));
(u_xlat18.x = (u_xlat0.x + u_xlat18.x));
(u_xlat0.x = (u_xlat0.x + u_xlat16_7.y));
(u_xlat0.x = ((u_xlat0.x * 0.5) + 1.0));
(u_xlat0.x = (u_xlat0.x + (-_SecondShadow)));
(u_xlat0.x = floor(u_xlat0.x));
(u_xlat18.x = ((u_xlat18.x * 0.5) + 1.0));
(u_xlat18.x = (u_xlat18.x + (-_FirstShadow)));
(u_xlat18.x = (u_xlat18.x + -1.0));
(u_xlat18.x = max(u_xlat18.x, (-_SmoothFactor)));
(u_xlat18.x = min(u_xlat18.x, _SmoothFactor));
(u_xlat18.x = (u_xlat18.x + _SmoothFactor));
(u_xlat27 = (_SmoothFactor + _SmoothFactor));
(u_xlat0.z = (u_xlat18.x / u_xlat27));
(u_xlat0.xz = ((-u_xlat0.xz) + vec2(1.0, 1.0)));
(u_xlat2.xyz = ((u_xlat0.zzz * u_xlat6.xyz) + u_xlat2.xyz));
(u_xlat6.xyz = (u_xlat1.xyz * _SecondShadowColor.xyz));
(u_xlat6.xyz = ((u_xlat6.xyz * _XGlobalCharacterTwoShadowColor.xyz) + (-u_xlat5.xyz)));
(u_xlat0.xzw = ((u_xlat0.xxx * u_xlat6.xyz) + u_xlat5.xyz));
(u_xlat0.xzw = ((-u_xlat2.xyz) + u_xlat0.xzw));
(u_xlat28 = (u_xlat16_7.y + 0.89999998));
(u_xlat28 = floor(u_xlat28));
(u_xlat28 = ((-u_xlat28) + 1.0));
(u_xlat0.xzw = ((vec3(u_xlat28) * u_xlat0.xzw) + u_xlat2.xyz));
(u_xlat28 = (u_xlat16_7.z * _SpecularIntensity));
(u_xlat1.xyz = (u_xlat1.xyz * vec3(u_xlat28)));
(u_xlat1.xyz = (u_xlat1.xyz * vec3(_SpecularColor.x, _SpecularColor.y, _SpecularColor.z)));
(u_xlat1.xyz = (u_xlat9.xxx * u_xlat1.xyz));
(u_xlat0.xyz = ((u_xlat1.xyz * _XGlobalCharSpecularColor.xyz) + u_xlat0.xzw));
(u_xlat0.xyz = (u_xlat0.xyz * _XGlobalCharacterLightColor.xyz));
(u_xlat0.xyz = ((u_xlat0.xyz * vs_TEXCOORD5.xyz) + u_xlat0.xyz));
(u_xlat0.w = (u_xlat3.w * _BloomFactor));
(u_xlat1.xyz = (u_xlat3.xyz * vec3(_EmissionIntensity)));
(u_xlat1.xyz = (u_xlat1.xyz * vec3(_EmissionColor.x, _EmissionColor.y, _EmissionColor.z)));
(u_xlat1.xyz = (u_xlat16_7.www * u_xlat1.xyz));
(u_xlat2.x = ((-_BloomFactor) + _EmissionBloomFactor));
(u_xlat1.w = ((u_xlat2.x * u_xlat16_7.w) + _BloomFactor));
(u_xlat0 = (u_xlat0 + u_xlat1));
(u_xlat16_4.xyz = ((vec3(vec3(_EffectRimTransparency, _EffectRimTransparency, _EffectRimTransparency)) * u_xlat16_4.xyz) + u_xlat0.xyz));
(u_xlat0.w = max(u_xlat0.w, 0.0));
(u_xlat1.xyz = (_XGlobalCharacterAmbientColor.xyz * _GlobalTint.xyz));
(u_xlat1.xyz = (u_xlat1.xyz * u_xlat16_4.xyz));
(u_xlat2.xyz = (u_xlat1.xyz * _BloomModColor.xyz));
(u_xlat2.xyz = ((u_xlat2.xyz * vec3(_BloomModIntensity)) + (-u_xlat1.xyz)));
(u_xlat0.xyz = ((vec3(vec3(_XPostBloom, _XPostBloom, _XPostBloom)) * u_xlat2.xyz) + u_xlat1.xyz));
(u_xlat0 = (u_xlat0 + (-_LinearFogColor)));
(u_xlat1.x = max(vs_TEXCOORD6, 0.0));
(u_xlat1.x = ((u_xlat1.x * _LinearFogParams.x) + _LinearFogParams.y));
(u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0));
(SV_Target0 = ((u_xlat1.xxxx * u_xlat0) + _LinearFogColor));
return ;
}
