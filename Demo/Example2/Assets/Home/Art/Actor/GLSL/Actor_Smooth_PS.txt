#version 330
uniform vec3 _WorldSpaceCameraPos;
uniform vec3 _XGlobalCharSpecularColor;
uniform vec3 _XGlobalCharacterNoShadowColor;
uniform vec3 _XGlobalCharacterOneShadowColor;
uniform vec3 _XGlobalCharacterTwoShadowColor;
uniform vec3 _XGlobalCharacterRimColor;
uniform float _XGlobalCharacterShadowIntensity;
uniform vec3 _XGlobalCharacterLightColor;
uniform vec3 _XGlobalCharacterLightDir;
uniform vec3 _XGlobalCharacterAmbientColor;
uniform float _BloomFactor;
uniform float _EmissionIntensity;
uniform vec3 _EmissionColor;
uniform float _EmissionBloomFactor;
uniform float _XPostBloom;
uniform vec4 _BloomModColor;
uniform float _BloomModIntensity;
uniform vec4 _LinearFogColor;
uniform vec4 _LinearFogParams;
uniform vec4 _AlbedoColor;
uniform float _GlobalEnableDistanceRim;
uniform vec3 _GlobalRimLightDir;
uniform vec4 _MainTex_ST;
uniform vec4 _MaskTex_ST;
uniform vec4 _GlobalTint;
uniform float _FirstShadow;
uniform float _SecondShadow;
uniform vec3 _FirstShadowColor;
uniform vec3 _SecondShadowColor;
uniform float _SpecularShiness;
uniform float _SpecularIntensity;
uniform vec3 _SpecularColor;
uniform vec3 _NoShadowColor;
uniform float _SmoothFactor;
uniform vec3 _SkinColor;
uniform float _SkinIntensity;
uniform float _SkinRate;
uniform float _RimMax;
uniform float _RimMin;
uniform float _RimIntensity;
uniform vec3 _RimColor;
uniform float _RimThreshold;
uniform float _RimDistanceMin;
uniform float _RimDistanceMax;
uniform vec4 _EffectRimColor;
uniform float _EffectRimFading;
uniform float _EffectRimTransparency;
uniform sampler2D _MainTex;
uniform sampler2D _FaceMap;
uniform sampler2D _MaskTex;
uniform sampler2D _SkinRamp;
in vec4 vs_TEXCOORD0;
in vec3 vs_TEXCOORD1;
in float vs_TEXCOORD6;
in vec4 vs_TEXCOORD2;
in vec3 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat16_4;
vec4 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat18;
vec2 u_xlat20;
vec2 u_xlat16_20;
float u_xlat27;
float u_xlat28;
void main(){
(u_xlat0.x = (_SmoothFactor + _SmoothFactor));
(u_xlat9.x = dot(_XGlobalCharacterLightDir.xyz, _XGlobalCharacterLightDir.xyz));
(u_xlat9.x = inversesqrt(u_xlat9.x));
(u_xlat9.xyz = (u_xlat9.xxx * _XGlobalCharacterLightDir.xyz));
(u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz));
(u_xlat1.x = inversesqrt(u_xlat1.x));
(u_xlat1.xyz = (u_xlat1.xxx * vs_TEXCOORD1.xyz));
(u_xlat28 = dot(u_xlat1.xyz, u_xlat9.xyz));
(u_xlat2.x = ((u_xlat28 * 0.5) + 0.5));
(u_xlat20.xy = ((vs_TEXCOORD0.xy * _MaskTex_ST.xy) + _MaskTex_ST.zw));
(u_xlat16_3 = texture(_MaskTex, u_xlat20.xy));
(u_xlat16_20.xy = ((-u_xlat16_3.yx) + vec2(1.5, 2.0)));
(u_xlat28 = floor(u_xlat16_20.x));
(u_xlat28 = ((-u_xlat28) + 1.0));
(u_xlat16_4.xy = ((u_xlat16_3.yy * vec2(1.2, 1.25)) + vec2(-0.1, -0.12)));
(u_xlat16_20.x = ((-u_xlat16_4.y) + u_xlat16_4.x));
(u_xlat28 = ((u_xlat28 * u_xlat16_20.x) + u_xlat16_4.y));
(u_xlat28 = (u_xlat2.x + u_xlat28));
(u_xlat28 = ((u_xlat28 * 0.5) + 1.0));
(u_xlat28 = (u_xlat28 + (-_FirstShadow)));
(u_xlat28 = (u_xlat28 + -1.0));
(u_xlat28 = max(u_xlat28, (-_SmoothFactor)));
(u_xlat28 = min(u_xlat28, _SmoothFactor));
(u_xlat28 = (u_xlat28 + _SmoothFactor));
(u_xlat0.x = (u_xlat28 / u_xlat0.x));
(u_xlat0.x = ((-u_xlat0.x) + 1.0));
(u_xlat0.x = (u_xlat0.x * _XGlobalCharacterShadowIntensity));
(u_xlat2.y = 0.5);
(u_xlat16_4.xyz = texture(_SkinRamp, u_xlat2.xy).xyz);
(u_xlat28 = (u_xlat2.x + u_xlat16_3.y));
(u_xlat28 = ((u_xlat28 * 0.5) + 1.0));
(u_xlat28 = (u_xlat28 + (-_SecondShadow)));
(u_xlat28 = floor(u_xlat28));
(u_xlat28 = ((-u_xlat28) + 1.0));
(u_xlat28 = (u_xlat28 * _XGlobalCharacterShadowIntensity));
(u_xlat2.xy = ((vs_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw));
(u_xlat5 = texture(_MainTex, u_xlat2.xy));
(u_xlat16_6 = texture(_FaceMap, vs_TEXCOORD0.zw));
(u_xlat2.xyz = ((-u_xlat5.xyz) + u_xlat16_6.xyz));
(u_xlat5.xyz = ((u_xlat16_6.www * u_xlat2.xyz) + u_xlat5.xyz));
(u_xlat5 = (u_xlat5 * _AlbedoColor));
(u_xlat2.xyz = (u_xlat16_4.xyz * u_xlat5.xyz));
(u_xlat2.xyz = (u_xlat2.xyz * vec3(_SkinIntensity)));
(u_xlat2.xyz = ((u_xlat2.xyz * vec3(_SkinColor.x, _SkinColor.y, _SkinColor.z)) + (-u_xlat5.xyz)));
(u_xlat2.xyz = ((vec3(vec3(_SkinRate, _SkinRate, _SkinRate)) * u_xlat2.xyz) + u_xlat5.xyz));
(u_xlat4.xyz = (u_xlat2.xyz * _NoShadowColor.xyz));
(u_xlat4.xyz = (u_xlat4.xyz * _XGlobalCharacterNoShadowColor.xyz));
(u_xlat6.xyz = (u_xlat2.xyz * _FirstShadowColor.xyz));
(u_xlat7.xyz = ((u_xlat6.xyz * _XGlobalCharacterOneShadowColor.xyz) + (-u_xlat4.xyz)));
(u_xlat4.xyz = ((u_xlat0.xxx * u_xlat7.xyz) + u_xlat4.xyz));
(u_xlat6.xyz = (u_xlat6.xyz * _XGlobalCharacterOneShadowColor.xyz));
(u_xlat7.xyz = (u_xlat2.xyz * _SecondShadowColor.xyz));
(u_xlat7.xyz = ((u_xlat7.xyz * _XGlobalCharacterTwoShadowColor.xyz) + (-u_xlat6.xyz)));
(u_xlat6.xyz = ((vec3(u_xlat28) * u_xlat7.xyz) + u_xlat6.xyz));
(u_xlat6.xyz = ((-u_xlat4.xyz) + u_xlat6.xyz));
(u_xlat0.x = (u_xlat16_3.y + 0.89999998));
(u_xlat0.x = floor(u_xlat0.x));
(u_xlat0.x = ((-u_xlat0.x) + 1.0));
(u_xlat0.x = (u_xlat0.x * _XGlobalCharacterShadowIntensity));
(u_xlat4.xyz = ((u_xlat0.xxx * u_xlat6.xyz) + u_xlat4.xyz));
(u_xlat6.xyz = ((-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz));
(u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz));
(u_xlat0.x = inversesqrt(u_xlat0.x));
(u_xlat9.xyz = ((u_xlat6.xyz * u_xlat0.xxx) + u_xlat9.xyz));
(u_xlat6.xyz = (u_xlat0.xxx * u_xlat6.xyz));
(u_xlat16_0 = dot(u_xlat1.xyz, u_xlat6.xyz));
(u_xlat28 = dot(u_xlat9.xyz, u_xlat9.xyz));
(u_xlat28 = inversesqrt(u_xlat28));
(u_xlat9.xyz = (u_xlat9.xyz * vec3(u_xlat28)));
(u_xlat9.x = dot(u_xlat1.xyz, u_xlat9.xyz));
(u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0));
(u_xlat18 = dot(u_xlat1.xyz, _GlobalRimLightDir.xyz));
(u_xlat18 = clamp(u_xlat18, 0.0, 1.0));
(u_xlat9.x = max(u_xlat9.x, 9.9999997e-05));
(u_xlat9.x = log2(u_xlat9.x));
(u_xlat9.x = (u_xlat9.x * _SpecularShiness));
(u_xlat9.x = exp2(u_xlat9.x));
(u_xlat9.x = ((-u_xlat9.x) + u_xlat16_20.y));
(u_xlat9.x = floor(u_xlat9.x));
(u_xlat9.x = ((-u_xlat9.x) + 1.0));
(u_xlat9.x = max(u_xlat9.x, 0.0));
(u_xlat27 = (u_xlat16_3.z * _SpecularIntensity));
(u_xlat1.xyz = (u_xlat2.xyz * vec3(u_xlat27)));
(u_xlat1.xyz = (u_xlat1.xyz * vec3(_SpecularColor.x, _SpecularColor.y, _SpecularColor.z)));
(u_xlat1.xyz = (u_xlat9.xxx * u_xlat1.xyz));
(u_xlat1.xyz = ((u_xlat1.xyz * _XGlobalCharSpecularColor.xyz) + u_xlat4.xyz));
(u_xlat2.xyz = (vs_TEXCOORD2.xyz + (-_WorldSpaceCameraPos.xyz)));
(u_xlat9.x = dot(u_xlat2.xyz, u_xlat2.xyz));
(u_xlat9.x = (u_xlat9.x + (-_RimDistanceMin)));
(u_xlat27 = ((-_RimDistanceMin) + _RimDistanceMax));
(u_xlat27 = (1.0 / u_xlat27));
(u_xlat9.x = (u_xlat27 * u_xlat9.x));
(u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0));
(u_xlat27 = ((u_xlat9.x * -2.0) + 3.0));
(u_xlat9.x = (u_xlat9.x * u_xlat9.x));
(u_xlat9.x = (u_xlat9.x * u_xlat27));
(u_xlat9.x = ((_GlobalEnableDistanceRim * (-u_xlat9.x)) + 1.0));
(u_xlat9.x = (u_xlat18 * u_xlat9.x));
(u_xlat18 = u_xlat16_0);
(u_xlat18 = clamp(u_xlat18, 0.0, 1.0));
(u_xlat18 = ((-u_xlat18) + 1.0));
(u_xlat18 = (u_xlat18 + (-_RimMin)));
(u_xlat27 = ((-_RimMin) + _RimMax));
(u_xlat27 = (1.0 / u_xlat27));
(u_xlat18 = (u_xlat27 * u_xlat18));
(u_xlat18 = clamp(u_xlat18, 0.0, 1.0));
(u_xlat27 = (u_xlat18 * u_xlat18));
(u_xlat18 = ((u_xlat18 * -2.0) + 3.0));
(u_xlat18 = (u_xlat18 * u_xlat27));
(u_xlat18 = (u_xlat18 * _RimIntensity));
(u_xlat27 = (u_xlat16_0 + _RimThreshold));
(u_xlat16_8.x = ((-abs(u_xlat16_0)) + 1.0));
(u_xlat16_8.x = max(u_xlat16_8.x, 0.001));
(u_xlat16_8.x = log2(u_xlat16_8.x));
(u_xlat16_8.x = (u_xlat16_8.x * _EffectRimFading));
(u_xlat16_8.x = exp2(u_xlat16_8.x));
(u_xlat16_8.xyz = (u_xlat16_8.xxx * _EffectRimColor.xyz));
(u_xlatb0 = (u_xlat27 >= 0.0));
(u_xlat0.x = ((u_xlatb0) ? (1.0) : (0.0)));
(u_xlat0.x = (u_xlat0.x * u_xlat18));
(u_xlat0.xzw = (u_xlat0.xxx * _RimColor.xyz));
(u_xlat0.xzw = (u_xlat0.xzw * _XGlobalCharacterRimColor.xyz));
(u_xlat0.xyz = ((u_xlat9.xxx * u_xlat0.xzw) + u_xlat1.xyz));
(u_xlat0.xyz = (u_xlat0.xyz * _XGlobalCharacterLightColor.xyz));
(u_xlat0.xyz = ((u_xlat0.xyz * vs_TEXCOORD5.xyz) + u_xlat0.xyz));
(u_xlat0.w = (u_xlat5.w * _BloomFactor));
(u_xlat1.xyz = (u_xlat5.xyz * vec3(_EmissionIntensity)));
(u_xlat1.xyz = (u_xlat1.xyz * vec3(_EmissionColor.x, _EmissionColor.y, _EmissionColor.z)));
(u_xlat1.xyz = (u_xlat16_3.www * u_xlat1.xyz));
(u_xlat2.x = ((-_BloomFactor) + _EmissionBloomFactor));
(u_xlat1.w = ((u_xlat2.x * u_xlat16_3.w) + _BloomFactor));
(u_xlat0 = (u_xlat0 + u_xlat1));
(u_xlat16_8.xyz = ((vec3(vec3(_EffectRimTransparency, _EffectRimTransparency, _EffectRimTransparency)) * u_xlat16_8.xyz) + u_xlat0.xyz));
(u_xlat0.w = max(u_xlat0.w, 0.0));
(u_xlat1.xyz = (_XGlobalCharacterAmbientColor.xyz * _GlobalTint.xyz));
(u_xlat1.xyz = (u_xlat1.xyz * u_xlat16_8.xyz));
(u_xlat2.xyz = (u_xlat1.xyz * _BloomModColor.xyz));
(u_xlat2.xyz = ((u_xlat2.xyz * vec3(_BloomModIntensity)) + (-u_xlat1.xyz)));
(u_xlat0.xyz = ((vec3(vec3(_XPostBloom, _XPostBloom, _XPostBloom)) * u_xlat2.xyz) + u_xlat1.xyz));
(u_xlat0 = (u_xlat0 + (-_LinearFogColor)));
(u_xlat1.x = max(vs_TEXCOORD6, 0.0));
(u_xlat1.x = ((u_xlat1.x * _LinearFogParams.x) + _LinearFogParams.y));
(u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0));
(SV_Target0 = ((u_xlat1.xxxx * u_xlat0) + _LinearFogColor));
return ;
}
