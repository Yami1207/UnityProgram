#version 330
uniform vec3 _WorldSpaceCameraPos;
uniform vec3 _XGlobalCharSpecularColor;
uniform vec3 _XGlobalCharacterSkinNoShadowColor;
uniform vec3 _XGlobalCharacterSkinOneShadowColor;
uniform vec3 _XGlobalCharacterSkinTwoShadowColor;
uniform vec3 _XGlobalCharacterSkinRimColor;
uniform vec3 _XGlobalCharacterLightColor;
uniform vec3 _XGlobalCharacterLightDir;
uniform vec3 _XGlobalCharacterAmbientColor;
uniform float _BloomFactor;
uniform float _EmissionIntensity;
uniform vec3 _EmissionColor;
uniform float _EmissionBloomFactor;
uniform float _XPostBloom;
uniform vec4 _BloomModColor;
uniform float _BloomModIntensity;
uniform float _XShadowOffset;
uniform float _XShadowNormalBias;
uniform vec3 _XWorldSpaceShadowLightDir;
uniform vec4 _LinearFogColor;
uniform vec4 _LinearFogParams;
uniform vec4 _AlbedoColor;
uniform float _GlobalEnableDistanceRim;
uniform vec3 _GlobalRimLightDir;
uniform vec4 _MainTex_ST;
uniform vec4 _MaskTex_ST;
uniform vec4 _GlobalTint;
uniform float _FirstShadow;
uniform float _SecondShadow;
uniform vec3 _FirstShadowColor;
uniform vec3 _SecondShadowColor;
uniform float _SpecularShiness;
uniform float _SpecularIntensity;
uniform vec3 _SpecularColor;
uniform vec3 _NoShadowColor;
uniform vec3 _SkinColor;
uniform float _SkinIntensity;
uniform float _SkinRate;
uniform float _RimMax;
uniform float _RimMin;
uniform float _RimIntensity;
uniform vec3 _RimColor;
uniform float _RimThreshold;
uniform float _RimDistanceMin;
uniform float _RimDistanceMax;
uniform vec4 _EffectRimColor;
uniform float _EffectRimFading;
uniform float _EffectRimTransparency;
uniform sampler2D _MainTex;
uniform sampler2D _SkinRamp;
uniform sampler2D _MaskTex;
uniform sampler2D _XShadowTexture;
in vec4 vs_TEXCOORD0;
in vec3 vs_TEXCOORD1;
in float vs_TEXCOORD6;
in vec4 vs_TEXCOORD2;
in vec3 vs_TEXCOORD5;
in vec4 vs_TEXCOORD7;
in vec4 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat16_5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat16_9;
vec2 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat16_14;
float u_xlat20;
float u_xlat21;
float u_xlat16_21;
float u_xlat30;
float u_xlat16_30;
bool u_xlatb30;
float u_xlat31;
void main(){
(u_xlat0.xyz = (vs_TEXCOORD8.xyz / vs_TEXCOORD8.www));
(u_xlat0.xyz = ((u_xlat0.xyz * vec3(0.5, 0.5, 0.5)) + vec3(0.5, 0.5, 0.5)));
(u_xlatb1.xy = greaterThanEqual(u_xlat0.xyxx, vec4(0.1, 0.1, 0.0, 0.0)).xy);
(u_xlatb1.zw = greaterThanEqual(vec4(0.0, 0.0, 0.89999998, 0.89999998), u_xlat0.xxxy).zw);
(u_xlat1 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb1)));
(u_xlat30 = (u_xlat1.z * u_xlat1.x));
(u_xlat30 = (u_xlat1.y * u_xlat30));
(u_xlat30 = (((-u_xlat30) * u_xlat1.w) + 1.0));
(u_xlat16_1 = texture(_XShadowTexture, u_xlat0.xy));
(u_xlat0.x = dot(u_xlat16_1, vec4(1.0, 0.0039215689, 1.53787e-05, 6.0308629e-08)));
(u_xlat10.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz));
(u_xlat10.x = inversesqrt(u_xlat10.x));
(u_xlat1.xyz = (u_xlat10.xxx * vs_TEXCOORD1.xyz));
(u_xlat10.x = dot(u_xlat1.xyz, _XWorldSpaceShadowLightDir.xyz));
(u_xlat10.x = (((-u_xlat10.x) * u_xlat10.x) + 1.0));
(u_xlat10.x = sqrt(u_xlat10.x));
(u_xlat10.x = ((_XShadowNormalBias * u_xlat10.x) + _XShadowOffset));
(u_xlat10.x = ((-u_xlat10.x) + u_xlat0.z));
(u_xlatb0 = (u_xlat0.x >= u_xlat10.x));
(u_xlat0.x = ((u_xlatb0) ? (1.0) : (u_xlat30)));

(u_xlat10.xy = ((vs_TEXCOORD0.xy * _MaskTex_ST.xy) + _MaskTex_ST.zw));
(u_xlat16_2 = texture(_MaskTex, u_xlat10.xy));
(u_xlat10.x = ((vs_TEXCOORD7.y * 2.0) + u_xlat16_2.y));
(u_xlat10.x = (u_xlat10.x + -1.0));
(u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0));
(u_xlat20 = ((-u_xlat10.x) + 1.5));
(u_xlat20 = floor(u_xlat20));
(u_xlat20 = ((-u_xlat20) + 1.0));
(u_xlat3.xy = ((u_xlat10.xx * vec2(1.2, 1.25)) + vec2(-0.1, -0.12)));
(u_xlat30 = ((-u_xlat3.y) + u_xlat3.x));
(u_xlat20 = ((u_xlat20 * u_xlat30) + u_xlat3.y));

(u_xlat30 = dot(_XGlobalCharacterLightDir.xyz, _XGlobalCharacterLightDir.xyz));
(u_xlat30 = inversesqrt(u_xlat30));
(u_xlat3.xyz = (vec3(u_xlat30) * _XGlobalCharacterLightDir.xyz));
(u_xlat30 = dot(u_xlat1.xyz, u_xlat3.xyz));
(u_xlat4.x = ((u_xlat30 * 0.5) + 0.5));

(u_xlat20 = (u_xlat20 + u_xlat4.x));
(u_xlat20 = ((u_xlat20 * 0.5) + 1.0));
(u_xlat20 = (u_xlat20 + (-_FirstShadow)));
(u_xlat20 = floor(u_xlat20));
(u_xlat0.x = ((u_xlat0.x * (-u_xlat20)) + 1.0));

(u_xlat4.y = 0.5);
(u_xlat16_14.xyz = texture(_SkinRamp, u_xlat4.xy).xyz);
(u_xlat20 = (u_xlat10.x + u_xlat4.x));
(u_xlat10.x = (u_xlat10.x + 0.89999998));
(u_xlat10.x = floor(u_xlat10.x));
(u_xlat20 = ((u_xlat20 * 0.5) + 1.0));
(u_xlat20 = (u_xlat20 + (-_SecondShadow)));
(u_xlat10.y = floor(u_xlat20));
(u_xlat10.xy = ((-u_xlat10.xy) + vec2(1.0, 1.0)));

(u_xlat5.xy = ((vs_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw));
(u_xlat16_5 = texture(_MainTex, u_xlat5.xy));
(u_xlat5 = (u_xlat16_5 * _AlbedoColor));

(u_xlat4.xyz = (u_xlat16_14.xyz * u_xlat5.xyz));
(u_xlat4.xyz = (u_xlat4.xyz * vec3(vec3(_SkinIntensity, _SkinIntensity, _SkinIntensity))));
(u_xlat4.xyz = ((u_xlat4.xyz * _SkinColor.xyz) + (-u_xlat5.xyz)));
(u_xlat4.xyz = ((vec3(_SkinRate) * u_xlat4.xyz) + u_xlat5.xyz));

(u_xlat6.xyz = (u_xlat4.xyz * _NoShadowColor.xyz));
(u_xlat6.xyz = (u_xlat6.xyz * _XGlobalCharacterSkinNoShadowColor.xyz));
(u_xlat7.xyz = (u_xlat4.xyz * _FirstShadowColor.xyz));
(u_xlat8.xyz = ((u_xlat7.xyz * _XGlobalCharacterSkinOneShadowColor.xyz) + (-u_xlat6.xyz)));
(u_xlat6.xyz = ((u_xlat0.xxx * u_xlat8.xyz) + u_xlat6.xyz));
(u_xlat7.xyz = (u_xlat7.xyz * _XGlobalCharacterSkinOneShadowColor.xyz));
(u_xlat8.xyz = (u_xlat4.xyz * _SecondShadowColor.xyz));
(u_xlat8.xyz = ((u_xlat8.xyz * _XGlobalCharacterSkinTwoShadowColor.xyz) + (-u_xlat7.xyz)));

(u_xlat0.xzw = ((u_xlat10.yyy * u_xlat8.xyz) + u_xlat7.xyz));
(u_xlat0.xzw = ((-u_xlat6.xyz) + u_xlat0.xzw));
(u_xlat0.xyz = ((u_xlat10.xxx * u_xlat0.xzw) + u_xlat6.xyz));
(u_xlat6.xyz = ((-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz));
(u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz));
(u_xlat30 = inversesqrt(u_xlat30));
(u_xlat3.xyz = ((u_xlat6.xyz * vec3(u_xlat30)) + u_xlat3.xyz));

(u_xlat6.xyz = (vec3(u_xlat30) * u_xlat6.xyz));
(u_xlat16_30 = dot(u_xlat1.xyz, u_xlat6.xyz));
(u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz));
(u_xlat31 = inversesqrt(u_xlat31));
(u_xlat3.xyz = (vec3(u_xlat31) * u_xlat3.xyz));

(u_xlat31 = dot(u_xlat1.xyz, u_xlat3.xyz));
(u_xlat31 = clamp(u_xlat31, 0.0, 1.0));
(u_xlat1.x = dot(u_xlat1.xyz, _GlobalRimLightDir.xyz));
(u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0));
(u_xlat11.x = max(u_xlat31, 9.9999997e-05));
(u_xlat11.x = log2(u_xlat11.x));
(u_xlat11.x = (u_xlat11.x * _SpecularShiness));
(u_xlat11.x = exp2(u_xlat11.x));

(u_xlat16_21 = ((-u_xlat16_2.x) + 2.0));
(u_xlat11.x = ((-u_xlat11.x) + u_xlat16_21));
(u_xlat11.x = floor(u_xlat11.x));
(u_xlat11.x = ((-u_xlat11.x) + 1.0));
(u_xlat11.x = max(u_xlat11.x, 0.0));
(u_xlat21 = (u_xlat16_2.z * _SpecularIntensity));
(u_xlat2.xyz = (u_xlat4.xyz * vec3(u_xlat21)));
(u_xlat2.xyz = (u_xlat2.xyz * vec3(_SpecularColor.x, _SpecularColor.y, _SpecularColor.z)));
(u_xlat11.xyz = (u_xlat11.xxx * u_xlat2.xyz));
(u_xlat0.xyz = ((u_xlat11.xyz * _XGlobalCharSpecularColor.xyz) + u_xlat0.xyz));

(u_xlat11.x = u_xlat16_30);
(u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0));
(u_xlat11.x = ((-u_xlat11.x) + 1.0));
(u_xlat11.x = (u_xlat11.x + (-_RimMin)));
(u_xlat21 = ((-_RimMin) + _RimMax));
(u_xlat21 = (1.0 / u_xlat21));
(u_xlat11.x = (u_xlat21 * u_xlat11.x));
(u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0));
(u_xlat21 = (u_xlat11.x * u_xlat11.x));
(u_xlat11.x = ((u_xlat11.x * -2.0) + 3.0));
(u_xlat11.x = (u_xlat11.x * u_xlat21));
(u_xlat11.x = (u_xlat11.x * _RimIntensity));
(u_xlat21 = (u_xlat16_30 + _RimThreshold));

(u_xlat16_9.x = ((-abs(u_xlat16_30)) + 1.0));
(u_xlat16_9.x = max(u_xlat16_9.x, 0.001));
(u_xlat16_9.x = log2(u_xlat16_9.x));
(u_xlat16_9.x = (u_xlat16_9.x * _EffectRimFading));
(u_xlat16_9.x = exp2(u_xlat16_9.x));
(u_xlat16_9.xyz = (u_xlat16_9.xxx * _EffectRimColor.xyz));

(u_xlatb30 = (u_xlat21 >= 0.0));
(u_xlat30 = ((u_xlatb30) ? (1.0) : (0.0)));
(u_xlat30 = (u_xlat30 * u_xlat11.x));
(u_xlat11.xyz = (vec3(u_xlat30) * _RimColor.xyz));
(u_xlat11.xyz = (u_xlat11.xyz * _XGlobalCharacterSkinRimColor.xyz));
(u_xlat11.xyz = (u_xlat11.xyz * vs_TEXCOORD7.www));

(u_xlat2.xyz = (vs_TEXCOORD2.xyz + (-_WorldSpaceCameraPos.xyz)));
(u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz));
(u_xlat30 = (u_xlat30 + (-_RimDistanceMin)));
(u_xlat2.x = ((-_RimDistanceMin) + _RimDistanceMax));
(u_xlat2.x = (1.0 / u_xlat2.x));
(u_xlat30 = (u_xlat30 * u_xlat2.x));
(u_xlat30 = clamp(u_xlat30, 0.0, 1.0));
(u_xlat2.x = ((u_xlat30 * -2.0) + 3.0));
(u_xlat30 = (u_xlat30 * u_xlat30));
(u_xlat30 = (u_xlat30 * u_xlat2.x));
(u_xlat30 = ((_GlobalEnableDistanceRim * (-u_xlat30)) + 1.0));
(u_xlat30 = (u_xlat1.x * u_xlat30));

(u_xlat0.xyz = ((vec3(u_xlat30) * u_xlat11.xyz) + u_xlat0.xyz));
(u_xlat0.xyz = (u_xlat0.xyz * _XGlobalCharacterLightColor.xyz));
(u_xlat0.xyz = ((u_xlat0.xyz * vs_TEXCOORD5.xyz) + u_xlat0.xyz));
(u_xlat0.w = (u_xlat5.w * _BloomFactor));
(u_xlat1.xyz = (u_xlat5.xyz * vec3(_EmissionIntensity)));
(u_xlat1.xyz = (u_xlat1.xyz * vec3(_EmissionColor.x, _EmissionColor.y, _EmissionColor.z)));
(u_xlat1.xyz = (u_xlat16_2.www * u_xlat1.xyz));
(u_xlat2.x = ((-_BloomFactor) + _EmissionBloomFactor));
(u_xlat1.w = ((u_xlat2.x * u_xlat16_2.w) + _BloomFactor));
(u_xlat0 = (u_xlat0 + u_xlat1));
(u_xlat16_9.xyz = ((vec3(vec3(_EffectRimTransparency, _EffectRimTransparency, _EffectRimTransparency)) * u_xlat16_9.xyz) + u_xlat0.xyz));
(u_xlat0.w = max(u_xlat0.w, 0.0));

(u_xlat1.xyz = (_XGlobalCharacterAmbientColor.xyz * _GlobalTint.xyz));
(u_xlat1.xyz = (u_xlat1.xyz * u_xlat16_9.xyz));

(u_xlat2.xyz = (u_xlat1.xyz * _BloomModColor.xyz));
(u_xlat2.xyz = ((u_xlat2.xyz * vec3(_BloomModIntensity)) + (-u_xlat1.xyz)));
(u_xlat0.xyz = ((vec3(vec3(_XPostBloom, _XPostBloom, _XPostBloom)) * u_xlat2.xyz) + u_xlat1.xyz));

(u_xlat0 = (u_xlat0 + (-_LinearFogColor)));
(u_xlat1.x = max(vs_TEXCOORD6, 0.0));
(u_xlat1.x = ((u_xlat1.x * _LinearFogParams.x) + _LinearFogParams.y));
(u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0));
(SV_Target0 = ((u_xlat1.xxxx * u_xlat0) + _LinearFogColor));
return ;
}
