#version 330
uniform vec3 _WorldSpaceCameraPos;
uniform vec3 _XGlobalCharSpecularColor;
uniform vec3 _XGlobalCharacterNoShadowColor;
uniform vec3 _XGlobalCharacterOneShadowColor;
uniform vec3 _XGlobalCharacterTwoShadowColor;
uniform vec3 _XGlobalCharacterLightColor;
uniform vec3 _XGlobalCharacterLightDir;
uniform vec3 _XGlobalCharacterAmbientColor;
uniform float _BloomFactor;
uniform float _EmissionIntensity;
uniform vec3 _EmissionColor;
uniform float _EmissionBloomFactor;
uniform float _XPostBloom;
uniform vec4 _BloomModColor;
uniform float _BloomModIntensity;
uniform float _BumpScale;
uniform vec4 _BumpMap_ST;
uniform vec4 _LinearFogColor;
uniform vec4 _LinearFogParams;
uniform vec4 _AlbedoColor;
uniform vec4 _MainTex_ST;
uniform vec4 _MaskTex_ST;
uniform vec4 _GlobalTint;
uniform float _FirstShadow;
uniform float _SecondShadow;
uniform vec3 _FirstShadowColor;
uniform vec3 _SecondShadowColor;
uniform float _SpecularShiness;
uniform float _SpecularIntensity;
uniform vec3 _SpecularColor;
uniform vec3 _NoShadowColor;
uniform vec4 _EffectRimColor;
uniform float _EffectRimFading;
uniform float _EffectRimTransparency;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
in vec4 vs_TEXCOORD0;
in vec4 vs_TEXCOORD1;
in vec4 vs_TEXCOORD2;
in vec4 vs_TEXCOORD3;
in vec3 vs_TEXCOORD5;
in float vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat16_3;
vec4 u_xlat4;
vec4 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat16_7;
vec3 u_xlat8;
float u_xlat24;
float u_xlat16_24;
float u_xlat25;
void main(){
(u_xlat0.xy = ((vs_TEXCOORD0.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw));
(u_xlat16_0.xyz = texture(_BumpMap, u_xlat0.xy).xyz);
(u_xlat0.xyz = ((u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0)) + vec3(-1.0, -1.0, -1.0)));
(u_xlat0.xy = (u_xlat0.xy * vec2(_BumpScale)));
(u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz));
(u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz));
(u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz));
(u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz));
(u_xlat0.x = inversesqrt(u_xlat0.x));
(u_xlat0.xyz = (u_xlat0.xxx * u_xlat1.xyz));

(u_xlat24 = dot(_XGlobalCharacterLightDir.xyz, _XGlobalCharacterLightDir.xyz));
(u_xlat24 = inversesqrt(u_xlat24));
(u_xlat1.xyz = (vec3(u_xlat24) * _XGlobalCharacterLightDir.xyz));

(u_xlat24 = dot(u_xlat0.xyz, u_xlat1.xyz));
(u_xlat24 = ((u_xlat24 * 0.5) + 0.5));

(u_xlat2.xy = ((vs_TEXCOORD0.xy * _MaskTex_ST.xy) + _MaskTex_ST.zw));
(u_xlat16_2 = texture(_MaskTex, u_xlat2.xy));
(u_xlat16_3.xy = ((-u_xlat16_2.yx) + vec2(1.5, 2.0)));
(u_xlat25 = floor(u_xlat16_3.x));
(u_xlat25 = ((-u_xlat25) + 1.0));

(u_xlat16_3.xz = ((u_xlat16_2.yy * vec2(1.2, 1.25)) + vec2(-0.1, -0.12)));
(u_xlat16_2.x = ((-u_xlat16_3.z) + u_xlat16_3.x));
(u_xlat25 = ((u_xlat25 * u_xlat16_2.x) + u_xlat16_3.z));
(u_xlat25 = (u_xlat24 + u_xlat25));

(u_xlat24 = (u_xlat24 + u_xlat16_2.y));
(u_xlat24 = ((u_xlat24 * 0.5) + 1.0));
(u_xlat24 = (u_xlat24 + (-_SecondShadow)));
(u_xlat24 = floor(u_xlat24));
(u_xlat24 = ((-u_xlat24) + 1.0));

(u_xlat25 = ((u_xlat25 * 0.5) + 1.0));
(u_xlat25 = (u_xlat25 + (-_FirstShadow)));
(u_xlat25 = floor(u_xlat25));
(u_xlat25 = ((-u_xlat25) + 1.0));

(u_xlat3.xz = ((vs_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw));
(u_xlat16_4 = texture(_MainTex, u_xlat3.xz));
(u_xlat4 = (u_xlat16_4 * _AlbedoColor));
(u_xlat3.xzw = (u_xlat4.xyz * _NoShadowColor.xyz));
(u_xlat3.xzw = (u_xlat3.xzw * _XGlobalCharacterNoShadowColor.xyz));

(u_xlat5.xyz = (u_xlat4.xyz * _FirstShadowColor.xyz));
(u_xlat6.xyz = ((u_xlat5.xyz * _XGlobalCharacterOneShadowColor.xyz) + (-u_xlat3.xzw)));
(u_xlat3.xzw = ((vec3(u_xlat25) * u_xlat6.xyz) + u_xlat3.xzw));

(u_xlat5.xyz = (u_xlat5.xyz * _XGlobalCharacterOneShadowColor.xyz));
(u_xlat6.xyz = (u_xlat4.xyz * _SecondShadowColor.xyz));
(u_xlat6.xyz = ((u_xlat6.xyz * _XGlobalCharacterTwoShadowColor.xyz) + (-u_xlat5.xyz)));
(u_xlat5.xyz = ((vec3(u_xlat24) * u_xlat6.xyz) + u_xlat5.xyz));
(u_xlat5.xyz = ((-u_xlat3.xzw) + u_xlat5.xyz));
(u_xlat24 = (u_xlat16_2.y + 0.89999998));
(u_xlat24 = floor(u_xlat24));
(u_xlat24 = ((-u_xlat24) + 1.0));
(u_xlat3.xzw = ((vec3(u_xlat24) * u_xlat5.xyz) + u_xlat3.xzw));

(u_xlat5.x = vs_TEXCOORD1.w);
(u_xlat5.y = vs_TEXCOORD2.w);
(u_xlat5.z = vs_TEXCOORD3.w);
(u_xlat5.xyz = ((-u_xlat5.xyz) + _WorldSpaceCameraPos.xyz));
(u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz));
(u_xlat24 = inversesqrt(u_xlat24));
(u_xlat1.xyz = ((u_xlat5.xyz * vec3(u_xlat24)) + u_xlat1.xyz));
(u_xlat5.xyz = (vec3(u_xlat24) * u_xlat5.xyz));
(u_xlat16_24 = dot(u_xlat0.xyz, u_xlat5.xyz));
(u_xlat16_7.x = ((-abs(u_xlat16_24)) + 1.0));
(u_xlat16_7.x = max(u_xlat16_7.x, 0.001));
(u_xlat16_7.x = log2(u_xlat16_7.x));
(u_xlat16_7.x = (u_xlat16_7.x * _EffectRimFading));
(u_xlat16_7.x = exp2(u_xlat16_7.x));
(u_xlat16_7.xyz = (u_xlat16_7.xxx * _EffectRimColor.xyz));

(u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz));
(u_xlat24 = inversesqrt(u_xlat24));
(u_xlat1.xyz = (vec3(u_xlat24) * u_xlat1.xyz));
(u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz));
(u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0));
(u_xlat0.x = max(u_xlat0.x, 9.9999997e-05));
(u_xlat0.x = log2(u_xlat0.x));
(u_xlat0.x = (u_xlat0.x * _SpecularShiness));
(u_xlat0.x = exp2(u_xlat0.x));
(u_xlat0.x = ((-u_xlat0.x) + u_xlat16_3.y));
(u_xlat0.x = floor(u_xlat0.x));
(u_xlat0.x = ((-u_xlat0.x) + 1.0));
(u_xlat0.x = max(u_xlat0.x, 0.0));
(u_xlat8.x = (u_xlat16_2.z * _SpecularIntensity));
(u_xlat8.xyz = (u_xlat4.xyz * u_xlat8.xxx));
(u_xlat8.xyz = (u_xlat8.xyz * vec3(_SpecularColor.x, _SpecularColor.y, _SpecularColor.z)));
(u_xlat0.xyz = (u_xlat8.xyz * u_xlat0.xxx));
(u_xlat0.xyz = ((u_xlat0.xyz * _XGlobalCharSpecularColor.xyz) + u_xlat3.xzw));
(u_xlat0.xyz = (u_xlat0.xyz * _XGlobalCharacterLightColor.xyz));
(u_xlat0.xyz = ((u_xlat0.xyz * vs_TEXCOORD5.xyz) + u_xlat0.xyz));

(u_xlat0.w = (u_xlat4.w * _BloomFactor));

(u_xlat1.xyz = (u_xlat4.xyz * vec3(_EmissionIntensity)));
(u_xlat1.xyz = (u_xlat1.xyz * vec3(_EmissionColor.x, _EmissionColor.y, _EmissionColor.z)));
(u_xlat1.xyz = (u_xlat16_2.www * u_xlat1.xyz));

(u_xlat2.x = ((-_BloomFactor) + _EmissionBloomFactor));
(u_xlat1.w = ((u_xlat2.x * u_xlat16_2.w) + _BloomFactor));
(u_xlat0 = (u_xlat0 + u_xlat1));

(u_xlat16_7.xyz = ((vec3(vec3(_EffectRimTransparency, _EffectRimTransparency, _EffectRimTransparency)) * u_xlat16_7.xyz) + u_xlat0.xyz));

(u_xlat0.w = max(u_xlat0.w, 0.0));
(u_xlat1.xyz = (_XGlobalCharacterAmbientColor.xyz * _GlobalTint.xyz));
(u_xlat1.xyz = (u_xlat1.xyz * u_xlat16_7.xyz));
(u_xlat2.xyz = (u_xlat1.xyz * _BloomModColor.xyz));
(u_xlat2.xyz = ((u_xlat2.xyz * vec3(_BloomModIntensity)) + (-u_xlat1.xyz)));
(u_xlat0.xyz = ((vec3(vec3(_XPostBloom, _XPostBloom, _XPostBloom)) * u_xlat2.xyz) + u_xlat1.xyz));

(u_xlat0 = (u_xlat0 + (-_LinearFogColor)));
(u_xlat1.x = max(vs_TEXCOORD6, 0.0));
(u_xlat1.x = ((u_xlat1.x * _LinearFogParams.x) + _LinearFogParams.y));
(u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0));
(SV_Target0 = ((u_xlat1.xxxx * u_xlat0) + _LinearFogColor));
return ;
}
